
#line 3 "apr_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SEAMSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SEAMSalloc (yy_size_t  );
void *SEAMSrealloc (void *,yy_size_t  );
void SEAMSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 104
#define YY_END_OF_BUFFER 105
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[711] =
    {   0,
        0,    0,   52,   52,    0,    0,   41,   41,    0,    0,
        2,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  105,  102,  102,  103,  100,  101,  101,  101,
      102,   97,   52,   72,   87,  102,   69,  102,  102,   73,
       74,   65,   63,   75,   64,   51,   68,   50,   77,   76,
       79,   54,   80,   78,   53,   53,   53,   88,   89,   70,
       97,  102,   92,   66,  102,  102,  100,  101,  101,  101,
      102,   97,   44,   44,   45,   41,   44,   41,   41,   41,
       41,   44,   44,  102,    3,    3,    4,    2,    3,    2,
        2,    2,    2,    3,    3,  102,  102,   35,  100,  101,

      101,  101,  102,   97,  102,  102,  100,  102,  102,  101,
      101,  101,  102,   97,  102,  102,   19,  100,  101,  101,
      101,  102,   97,  102,  102,   23,  100,  101,  101,  101,
      102,   97,  102,  102,   27,  100,  101,  101,  101,  102,
       97,    0,    0,  101,  101,  101,   94,   95,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,   52,
        0,   84,    0,   90,   85,    0,   91,   71,   57,   61,
       55,   62,   56,   51,    0,   67,   58,   51,   50,    0,
       81,   83,   82,   53,   53,   53,   59,    0,   86,   93,
        0,    0,    0,    0,  101,  101,  101,   94,   95,    0,

       96,    0,    0,   41,   41,   41,   41,   41,   42,   43,
        0,    0,    0,    0,    2,    2,    2,    2,    2,    0,
        0,   35,    0,    0,  101,  101,  101,   94,   95,    0,
        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  101,  101,  101,   94,   95,    0,   96,
        0,   19,    0,    0,  101,  101,  101,   94,   95,    0,
        0,    0,   96,    0,   23,    0,    0,  101,  101,  101,
       94,   95,    0,    0,    0,   96,    0,   27,    0,    0,
      101,  101,  101,   94,   95,    0,    0,    0,    0,    0,
       96,  101,  101,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   60,    0,   51,    0,
       50,   53,   53,    0,   49,  101,  101,    0,    0,   41,
       41,    0,    0,    0,    2,    2,    0,  101,  101,    0,
        0,    0,    0,    0,   13,    0,    0,    0,    0,    0,
        0,    0,  101,  101,    0,    0,  101,  101,    0,    0,
        0,    0,  101,  101,    0,    0,    0,    0,  101,  101,
        0,    0,    0,    0,    0,    0,   98,   99,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   53,   53,   49,   98,   99,    0,    0,   41,
       41,    0,    0,    0,   37,    0,    0,    2,    2,    0,

       98,   99,    0,    0,    0,    0,    0,    0,    0,   15,
        0,    0,   13,    0,    0,   14,    0,   98,   99,    0,
        0,   98,   99,    0,    0,    0,    0,   98,   99,    0,
        0,    0,    0,   98,   99,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    6,    0,    0,    0,    0,    0,    0,    0,   12,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   24,    0,    0,    0,    0,    0,   39,    0,
        0,    0,   29,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   36,    0,    0,    0,   35,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   19,    0,
        0,    0,   17,    0,    0,   23,    0,    0,    0,   21,
        0,   27,    0,    0,    0,    0,    0,    0,    0,   46,
        0,    0,   30,    0,    8,    0,    0,    0,    0,   49,

        0,    0,    0,   40,    0,   38,    0,    0,   31,    0,
       32,    0,    0,    0,    0,    0,    0,    0,   19,    0,
        0,    0,   23,    0,    0,   27,    0,    0,    0,    0,
        0,    0,    0,   47,    0,    0,    0,    0,   39,    0,
       49,    0,    0,   34,    0,   15,    0,    0,    0,    0,
       16,    0,    0,   20,    0,    0,    0,    0,   48,    0,
        7,    0,    0,    0,   25,    0,   46,    0,    0,    0,
       15,    0,    0,    0,    0,   25,    0,    9,    0,    0,
        0,    0,    0,    0,    0,   18,    0,   22,    0,    0,
        0,    0,    0,   28,    0,    0,   26,    0,    0,    0,

        0,    0,    0,    5,    0,    0,   10,    1,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       29,   32,   33,   29,   29,   34,   35,   36,   37,   29,
       38,   39,   29,   40,   41,   42,   29,   43,   29,   29,
       44,   45,   46,   47,   29,    1,   48,   49,   50,   51,

       52,   53,   29,   54,   55,   29,   29,   56,   29,   57,
       58,   59,   38,   60,   61,   62,   63,   29,   64,   43,
       29,   29,   65,   66,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    2,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[760] =
    {   0,
        0,    0,   68,    0,  136,    0,  204,    0,  271,  272,
      337,    0,  405,    0,  473,    0,  541,    0,  609,    0,
      677,    0, 2529, 2530,  744, 2530, 2530,    0, 2485,  236,
      213,  808,  748, 2530, 2504,  276, 2530, 2517, 2515, 2530,
     2530,  268,  269, 2530,  270,  265,  267,  270, 2530, 2530,
     2501, 2500, 2499, 2530,    0, 2478,  247, 2530, 2530, 2497,
      264, 2453, 2451, 2530, 2505,  749, 2504,  873, 2472,  255,
      735,  742, 2530,  753, 2530,  754, 2530,  757,  293,  745,
      758,  236,  765,  762, 2530,  766, 2530,  769, 2530,  758,
      294,  772,  770,  237,  751, 2511,  780, 2530, 2510,  941,

     2469,  264,  772,  802, 2499,  775, 2498,  998,  999, 1051,
     2466,  265,  784,  796, 2505, 1118, 2530, 2504, 1183, 2463,
      267,  788, 1249, 2502, 1251, 2530, 2501, 1316, 2460,  268,
      801, 1382, 2499, 1384, 2530, 2498, 1449, 2457,  270, 1515,
     1518, 1521,  270,    0,  730,  773, 2530, 2530, 1121, 2444,
      815,  812, 2440, 2460, 2466, 2443,  263,  268, 2530, 1522,
      794, 2530,  320, 2530, 2530, 2484, 2530, 2470, 2530, 2530,
     2530, 2530, 2530,  993, 1005, 2530, 2530,  995,  996, 1016,
     2530, 2530, 2530,    0,  987,  989, 2530,  977, 2530, 2530,
     2480, 1525, 1526, 1112,    0,  994, 1093, 2479, 2478, 1118,

     2477, 1529, 1125, 1530,  787, 1034, 1124, 1127, 2530, 2530,
     1254,  980, 2435, 1537, 1538, 1533, 1129, 1253, 1256, 2457,
     2483, 2530, 1541, 1258,    0, 1099, 1101, 2482, 2481, 1386,
     1256, 2480, 2470,  789, 1545, 1129, 1547, 1250, 1027, 1378,
     1251, 1255, 1124,    0, 1106, 1112, 2469, 2468, 1379, 2467,
     2475, 2530, 1550, 1392,    0, 1113, 1232, 2474, 2473, 1263,
     1516, 1543, 2472, 2471, 2530, 1558, 1574,    0, 1235, 1238,
     2470, 2469, 1390, 1533, 1553, 2468, 2467, 2530, 1562, 1614,
        0, 1244, 1245, 2466, 2465, 1617, 1568,  777, 1389, 1572,
     2464, 1242, 1357, 2409, 2408, 2432, 2402, 2411, 2426,  819,

     2410, 2401, 2428, 2418, 2403, 2404, 2530, 2435, 2434, 2433,
     2432, 1358, 1359, 1572,  312, 1361, 1362, 1546, 1125, 1592,
     1593, 2394, 2388, 1632, 1631, 1633, 2409, 1363, 1365, 1548,
     1590, 1645, 1028, 1150, 2530, 1647, 1166, 1151, 1388, 1401,
     1398, 1566, 1366, 1369, 1619, 1382, 1375, 1598, 1639, 1585,
     1637, 1642, 1612, 1617, 1655, 1602, 1658, 1659, 1630, 1632,
     1672, 1673, 1674, 1675, 1393, 1679,    0,    0, 2396, 2396,
     2408, 2392, 1648, 2402, 2390, 2390, 2384, 2380, 2410, 2410,
     2388, 1651,    0,    0, 2432,    0,    0, 1674, 1678, 1131,
     1146, 2373, 2381, 1697, 2530, 2380, 2380, 1559, 1687, 2403,

        0,    0, 1695, 1682, 1716, 2426, 1701, 1684, 1719, 2530,
     1720, 1736, 2530, 1737, 1738, 2530, 1739,    0,    0, 1693,
     1726,    0,    0, 1707, 1713, 1721, 1725,    0,    0, 1718,
     1740, 1741, 1743,    0,    0, 1749, 1753, 1755, 1757, 1759,
     1758, 2367, 2371, 1753, 2359, 2372, 2384, 2370, 2370, 2358,
     1768, 2388, 2393, 2355, 2353, 1745, 1761, 2364, 1756, 2362,
     2362, 2387, 1760, 1763, 2409, 2530, 1765, 1777, 1782, 1783,
     1787, 1757, 1781, 1768, 1779, 1780, 1795, 1833, 1798, 1800,
     1805, 1812, 1836, 1814, 1818, 1819, 2408, 1823, 1825, 2347,
     2372, 2530, 2405, 2340, 2380, 1839, 2352, 2353, 1850, 2530,

     2366, 2362, 2345, 2345, 1839, 1813, 1816, 2346, 1853, 2345,
     2357, 2393, 1828, 1879, 1845, 1853, 1820, 1859, 2392, 1842,
     1856, 1897, 2391, 1860, 2390, 1863, 1865, 1900, 2389, 2388,
     1866, 2387, 2530, 1870, 1873, 2338, 1843, 2154, 2530, 2140,
     2109, 1908, 2530, 1916, 2079, 2044, 2077, 2047, 2046, 1885,
     1932, 1893, 2103, 1920, 2530, 1935, 2072, 2101, 2530, 2100,
     1938, 2098, 1948, 1926, 1942, 1944, 1874, 2096, 2530, 2095,
     1889, 2094, 2530, 1903, 2093, 2530, 2091, 1904, 2090, 2530,
     2089, 2530, 2088, 1881, 1910, 2038, 2058, 2076, 2084, 2530,
     2052, 1951, 2530, 1956, 2530, 2050, 1962, 2033, 1966, 1962,

     1968, 1973, 2079, 2530, 1977, 2530, 2046, 2076, 2530, 2074,
     2530, 1980, 2073, 1983, 1984, 1986, 1954, 2072, 2530, 2071,
     1970, 2070, 2530, 2069, 2068, 2530, 1990, 1875, 1999, 2057,
     2001, 2037, 2000, 2530, 2055, 2003, 2062, 2010, 2060, 2011,
     1994, 2051, 2058, 2530, 2005, 2530, 2013, 2015, 1987, 2057,
     2530, 1997, 2055, 2530, 2017, 2052, 1261, 2020, 2530, 1985,
     2530, 2040, 1884, 1914, 2530, 2028, 1888, 1562, 2023, 2031,
     2530, 2033, 1578, 1564, 1552, 2530, 2035, 2530, 1395, 1393,
     2040, 1411, 1380, 2038, 1295, 2530, 1293, 2530, 2045, 1292,
     2023, 1282, 1289, 2530, 1140, 1162, 2530, 1121,  850,  762,

      785,  774,  267, 2530,  265,  240, 2530, 2530, 2530, 2530,
     2108, 2114, 2120, 2122, 2128, 2133, 2135, 2140, 2142, 2148,
     2154, 2160, 2166, 2172, 2178, 2184, 2190, 2196, 2202, 2208,
     2214, 2220, 2226, 2232, 2238, 2244, 2250, 2256, 2262, 2268,
     2274, 2280, 2286, 2292, 2298, 2304, 2310, 2316, 2322, 2328,
     2334, 2340, 2346, 2352, 2358, 2364, 2370, 2376, 2382
    } ;

static yyconst flex_int16_t yy_def[760] =
    {   0,
      710,    1,  710,    3,  710,    5,  710,    7,    1,    1,
      710,   11,  710,   13,  710,   15,  710,   17,  710,   19,
      710,   21,  710,  710,  710,  710,  710,  711,  711,  711,
      710,  710,  710,  710,  710,  712,  710,  710,  713,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  714,  714,  714,  710,  710,  710,
      710,  710,  710,  710,  715,  715,  715,  710,   68,   68,
      715,  715,  710,  710,  710,  716,  710,  716,  717,  717,
      717,  710,  710,  710,  710,  710,  710,  718,  710,  718,
      719,  719,  719,  710,  710,  720,  720,  710,  720,  710,

      100,  100,  720,  720,  721,  721,  721,  721,  721,  710,
      110,  110,  721,  721,  722,  722,  710,  722,  710,  119,
      119,  722,  722,  723,  723,  710,  723,  710,  128,  128,
      723,  723,  724,  724,  710,  724,  710,  137,  137,  724,
      724,  710,   32,  711,  711,  711,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  712,  710,  710,  713,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  714,  714,  714,  710,  710,  710,  710,
      715,  715,  715,  715,   68,   68,   68,  715,  715,  715,

      715,  710,  710,  716,  716,  717,  717,  717,  710,  710,
      710,  710,  710,  710,  718,  718,  719,  719,  719,  710,
      720,  710,  720,  720,  100,  100,  100,  720,  720,  720,
      720,  720,  721,  721,  721,  721,  725,  721,  721,  721,
      721,  721,  721,  110,  110,  110,  721,  721,  721,  721,
      722,  710,  722,  722,  119,  119,  119,  722,  722,  722,
      722,  722,  722,  723,  710,  723,  723,  128,  128,  128,
      723,  723,  723,  723,  723,  723,  724,  710,  724,  724,
      137,  137,  137,  724,  724,  724,  724,  724,  724,  724,
      724,  711,  711,  710,  710,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  714,  714,  715,  715,   68,   68,  715,  715,  717,
      717,  710,  710,  710,  719,  719,  710,  100,  100,  720,
      720,  720,  726,  725,  710,  725,  727,  721,  721,  728,
      721,  721,  110,  110,  721,  721,  119,  119,  722,  722,
      722,  722,  128,  128,  723,  723,  723,  723,  137,  137,
      724,  724,  724,  724,  724,  724,  711,  711,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  714,  714,  710,   68,   68,  715,  715,  717,
      717,  710,  710,  710,  710,  710,  710,  719,  719,  710,

      100,  100,  720,  720,  720,  729,  720,  720,  726,  710,
      726,  727,  710,  727,  728,  710,  728,  110,  110,  721,
      721,  119,  119,  722,  722,  722,  722,  128,  128,  723,
      723,  723,  723,  137,  137,  724,  724,  724,  724,  724,
      724,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  715,  715,  710,  710,  710,
      710,  710,  720,  720,  729,  710,  720,  720,  726,  727,
      728,  721,  721,  722,  722,  722,  722,  722,  723,  723,
      723,  723,  723,  724,  724,  724,  730,  724,  724,  710,
      710,  710,  731,  710,  710,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  732,  715,  710,  710,  710,  710,
      710,  733,  720,  720,  720,  734,  721,  722,  735,  722,
      722,  722,  736,  723,  737,  723,  723,  723,  738,  739,
      724,  730,  710,  724,  724,  710,  710,  731,  710,  740,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  732,
      732,  741,  742,  710,  710,  710,  710,  733,  710,  743,
      720,  744,  720,  734,  734,  745,  722,  735,  710,  746,
      722,  736,  710,  723,  737,  710,  747,  723,  738,  710,
      739,  710,  748,  724,  724,  710,  710,  710,  740,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  732,  732,

      741,  741,  742,  710,  710,  710,  710,  743,  710,  744,
      710,  720,  749,  750,  745,  745,  722,  746,  710,  751,
      723,  747,  710,  752,  748,  710,  724,  724,  710,  710,
      710,  710,  710,  710,  710,  710,  753,  710,  710,  741,
      741,  710,  749,  710,  750,  710,  750,  754,  722,  751,
      710,  723,  752,  710,  724,  755,  724,  710,  710,  710,
      710,  710,  710,  753,  710,  710,  710,  710,  750,  754,
      710,  754,  756,  757,  755,  710,  724,  710,  710,  710,
      710,  758,  710,  754,  756,  710,  757,  710,  724,  759,
      710,  710,  758,  710,  710,  759,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  710,  710,  710,  710,    0,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710
    } ;

static yyconst flex_int16_t yy_nxt[2599] =
    {   0,
       24,   25,   26,   25,   24,   24,   27,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   28,   28,   28,   28,   29,
       28,   28,   28,   28,   28,   28,   28,   30,   28,   28,
       28,   28,   28,   24,   31,   24,   24,   28,   28,   28,
       28,   29,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   32,   24,   24,   24,   24,   33,
       34,   33,   35,   36,   27,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   55,   55,   55,   56,   55,   55,

       55,   55,   55,   55,   55,   57,   55,   55,   55,   55,
       55,   58,   31,   59,   60,   55,   55,   55,   55,   56,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   61,   62,   63,   64,   65,   66,   26,   66,
       65,   65,   67,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   68,   68,   68,   68,   69,   68,   68,   68,   68,
       68,   68,   68,   70,   68,   68,   68,   68,   68,   65,
       71,   65,   65,   68,   68,   68,   68,   69,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       72,   65,   65,   65,   73,   74,   75,   76,   73,   73,
       77,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   78,   73,   73,   73,   73,   73,   73,   79,
       79,   79,   79,   80,   79,   79,   79,   79,   79,   79,
       79,   81,   79,   79,   79,   79,   79,   73,   82,   73,
       73,   79,   79,   79,   79,   80,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   83,   73,
       73,   73,   84,   84,   84,   84,  146,  147,  164,  148,
      168,  164,  170,  174,  176,  172,  178,  186,  179,  177,
      169,  171,  173,  188,  175,  197,  205,  216,  146,  180,

      209,  147,  210,  148,  227,  246,  709,  257,  270,  186,
      283,  710,  144,  144,  385,  188,  175,  197,  297,  306,
      300,  180,  164,  192,  301,  164,  227,  246,  159,  257,
      270,  708,  283,  707,  710,   61,   61,   85,   86,   87,
       88,   85,   85,   89,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   90,   85,   85,   85,   85,
       85,   85,   91,   91,   91,   91,   92,   91,   91,   91,
       91,   91,   91,   91,   93,   91,   91,   91,   91,   91,
       85,   94,   85,   85,   91,   91,   91,   91,   92,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   95,   85,   85,   85,   96,   97,   98,   97,   96,
       96,   99,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      100,  100,  100,  100,  101,  100,  100,  100,  100,  100,
      100,  100,  102,  100,  100,  100,  100,  100,   96,  103,
       96,   96,  100,  100,  100,  100,  101,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  104,
       96,   96,   96,  105,  106,   26,  106,  105,  105,  107,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  108,
      105,  109,  105,  105,  105,  105,  105,  105,  110,  110,

      110,  110,  111,  110,  110,  110,  110,  110,  110,  110,
      112,  110,  110,  110,  110,  110,  105,  113,  105,  105,
      110,  110,  110,  110,  111,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  114,  105,  105,
      105,  115,  116,  117,  116,  115,  115,  118,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  119,  119,  119,  119,
      120,  119,  119,  119,  119,  119,  119,  119,  121,  119,
      119,  119,  119,  119,  115,  122,  115,  115,  119,  119,
      119,  119,  120,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  123,  115,  115,  115,  124,
      125,  126,  125,  124,  124,  127,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  128,  128,  128,  128,  129,  128,
      128,  128,  128,  128,  128,  128,  130,  128,  128,  128,
      128,  128,  124,  131,  124,  124,  128,  128,  128,  128,
      129,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  132,  124,  124,  124,  133,  134,  135,
      134,  133,  133,  136,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  137,  137,  137,  137,  138,  137,  137,  137,
      137,  137,  137,  137,  139,  137,  137,  137,  137,  137,
      133,  140,  133,  133,  137,  137,  137,  137,  138,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  141,  133,  133,  133,  142,  192,  142,  205,  160,
      193,  160,  193,  192,  202,  202,  202,  204,  710,  710,
      192,  205,  292,  214,  144,  214,  211,  214,  211,  214,
      214,  200,  215,  216,  222,  216,  235,  144,  235,  278,
      188,  223,  222,  223,  292,  706,  234,  207,  710,  144,
      252,  144,  220,  200,  212,  234,  705,  213,  208,  198,

      234,  199,  188,  265,  222,  293,  201,  234,  143,  149,
      219,  149,  161,  194,  218,  159,  212,  203,  203,  213,
      208,  710,  710,  188,  364,  249,  161,  293,  704,  159,
      161,  230,  219,  161,  231,  150,  228,  151,  229,  236,
      152,  153,  296,  154,  224,  188,  299,  249,  247,  155,
      248,  710,  258,  230,  259,  333,  231,  150,  156,  157,
      250,  703,  158,  153,  300,  271,  232,  272,  301,  375,
      297,  298,  159,  191,  191,  376,  191,  191,  191,  191,
      191,  191,  191,  191,  192,  191,  191,  191,  191,  191,
      191,  195,  195,  191,  191,  191,  191,  191,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  191,  191,  191,  191,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  191,  191,  191,
      191,  221,  221,  222,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  225,
      225,  221,  221,  221,  221,  221,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  221,  221,  221,  221,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  221,  221,  221,  221,  237,
      240,  174,  178,  174,  179,  241,  238,  242,  308,  312,
      308,  313,  175,  309,  175,  180,  316,  239,  243,  310,
      410,  310,  297,  298,  311,  323,  298,  205,  234,  411,
      338,  312,  338,  313,  175,  339,  175,  180,  316,  239,
      243,  233,  233,  144,  233,  233,  233,  233,  233,  233,
      233,  233,  234,  233,  233,  233,  233,  233,  233,  244,
      244,  233,  233,  233,  233,  233,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  233,  233,  233,  233,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  233,  233,  233,  233,  253,
      252,  253,  149,  192,  149,  317,  211,  205,  211,  192,
      205,  328,  216,  329,  205,  234,  192,  341,  343,  341,
      234,  200,  342,  144,  344,  347,  144,  317,  144,  205,
      144,  702,  335,  328,  212,  329,  320,  213,  249,  321,
      343,  336,  234,  200,  697,  144,  344,  347,  413,  339,
      701,  156,  294,  318,  319,  389,  212,  414,  320,  213,
      249,  321,  254,  251,  251,  252,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,

      251,  255,  255,  251,  251,  251,  251,  251,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  251,  251,  251,  251,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  251,  251,  251,
      251,  252,  266,  265,  266,  211,  216,  211,  222,  216,
      222,  237,  237,  278,  348,  252,  240,  353,  238,  238,
      354,  241,  144,  242,  260,  144,  359,  360,  261,  239,
      239,  367,  262,  322,  243,  325,  348,  230,  326,  353,
      231,  694,  354,  700,  697,  688,  260,  686,  359,  360,

      261,  239,  239,  367,  262,  322,  243,  325,  332,  230,
      326,  349,  231,  263,  677,  267,  264,  264,  265,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  268,  268,  264,  264,  264,  264,
      264,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  264,
      264,  264,  264,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      264,  264,  264,  264,  265,  279,  278,  279,  222,  234,
      234,  278,  265,  234,  252,  278,  368,  383,  384,  237,

      386,  387,  401,  416,  402,  418,  339,  273,  419,  234,
      695,  274,  417,  694,  422,  275,  342,  260,  368,  383,
      384,  261,  386,  387,  401,  262,  402,  418,  692,  273,
      419,  691,  421,  274,  345,  346,  422,  275,  355,  260,
      365,  330,  331,  261,  340,  440,  276,  262,  280,  277,
      277,  278,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  281,  281,  277,
      277,  277,  277,  277,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  277,  277,  277,  277,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  277,  277,  277,  277,  278,  252,  286,
      278,  286,  142,  160,  142,  160,  314,  193,  314,  193,
      202,  202,  202,  204,  710,  265,  192,  192,  214,  214,
      214,  215,  223,  222,  223,  252,  235,  287,  235,  335,
      222,  253,  252,  253,  676,  265,  234,  192,  336,  266,
      265,  266,  216,  279,  278,  279,  688,  288,  289,  290,
      278,  350,  351,  314,  278,  314,  265,  240,  144,  284,
      686,  285,  291,  192,  342,  143,  161,  252,  356,  357,
      194,  315,  222,  203,  203,  205,  205,  710,  683,  273,

      352,  161,  161,  274,  265,  224,  388,  275,  403,  236,
      358,  144,  144,  337,  254,  286,  278,  286,  286,  278,
      286,  273,  267,  362,  363,  274,  280,  362,  366,  275,
      234,  390,  391,  394,  216,  394,  216,  423,  315,  252,
      404,  252,  395,  287,  252,  425,  405,  222,  405,  335,
      144,  428,  144,  390,  391,  406,  429,  265,  336,  423,
      265,  265,  431,  288,  289,  290,  288,  289,  361,  434,
      398,  435,  399,  428,  278,  278,  278,  278,  429,  420,
      446,  278,  396,  446,  222,  192,  222,  426,  397,  192,
      216,  434,  398,  435,  399,  407,  424,  222,  394,  427,

      394,  408,  446,  222,  234,  446,  144,  395,  432,  252,
      457,  455,  430,  337,  464,  252,  433,  405,  222,  405,
      265,  410,  410,  252,  438,  456,  406,  252,  436,  441,
      411,  411,  457,  437,  468,  439,  464,  234,  413,  413,
      416,  416,  265,  265,  472,  265,  463,  414,  414,  417,
      417,  278,  467,  476,  477,  278,  192,  278,  473,  278,
      278,  278,  222,  491,  475,  222,  474,  222,  234,  499,
      252,  499,  192,  481,  482,  476,  477,  479,  500,  222,
      473,  252,  252,  478,  410,  413,  469,  486,  508,  416,
      486,  480,  234,  411,  414,  481,  482,  252,  417,  484,

      265,  483,  265,  470,  485,  471,  488,  265,  487,  486,
      508,  505,  486,  506,  265,  513,  278,  514,  489,  492,
      278,  278,  493,  516,  192,  278,  512,  278,  515,  518,
      222,  234,  520,  517,  522,  252,  522,  528,  265,  528,
      542,  539,  542,  523,  252,  519,  529,  222,  508,  543,
      551,  499,  521,  499,  554,  539,  554,  526,  252,  524,
      500,  252,  265,  555,  565,  265,  525,  265,  278,  527,
      508,  531,  278,  587,  489,  278,  252,  278,  588,  552,
      561,  222,  561,  278,  530,  534,  566,  539,  535,  562,
      385,  252,  567,  574,  560,  590,  551,  563,  522,  252,

      522,  528,  265,  528,  602,  265,  265,  523,  570,  542,
      529,  542,  278,  571,  567,  574,  665,  592,  543,  592,
      680,  554,  578,  554,  657,  584,  593,  585,  539,  577,
      555,  617,  583,  599,  539,  599,  605,  565,  605,  561,
      222,  561,  627,  551,  539,  606,  590,  620,  562,  612,
      222,  612,  592,  565,  592,  616,  252,  633,  613,  633,
      621,  593,  624,  636,  639,  636,  634,  599,  539,  599,
      590,  628,  265,  551,  640,  590,  640,  551,  605,  602,
      605,  612,  222,  612,  602,  646,  590,  606,  590,  252,
      613,  655,  278,  655,  647,  616,  667,  616,  600,  265,

      658,  633,  658,  633,  636,  602,  636,  646,  614,  659,
      634,  649,  640,  590,  640,  646,  647,  671,  655,  278,
      655,  658,  602,  658,  647,  646,  672,  652,  637,  681,
      659,  681,  600,  671,  647,  671,  689,  278,  689,  641,
      671,  681,  672,  681,  672,  673,  689,  278,  689,  672,
      679,  678,  648,  698,  676,  674,  656,  654,  699,  651,
      644,  668,  385,  666,  665,  663,  662,  661,  660,  637,
      626,  654,  623,  651,  619,  644,  611,  641,  609,  669,
      642,  604,  638,  656,  635,  632,  590,  631,  630,  629,
      626,  582,  580,  623,  682,  576,  573,  619,  569,  684,

      611,  690,  609,  559,  607,  604,  682,  598,  597,  596,
      595,  690,  144,  144,  163,  163,  163,  163,  163,  163,
      166,  166,  166,  166,  166,  166,  184,  184,  191,  191,
      594,  191,  191,  191,  205,  591,  205,  205,  206,  206,
      206,  216,  590,  216,  216,  217,  217,  217,  221,  221,
      221,  221,  221,  221,  233,  233,  539,  233,  233,  233,
      251,  251,  251,  251,  251,  251,  264,  264,  264,  264,
      264,  264,  277,  277,  277,  277,  277,  277,  334,  334,
      334,  334,  334,  334,  409,  409,  409,  409,  409,  409,
      412,  412,  412,  412,  412,  412,  415,  415,  415,  415,

      415,  415,  465,  465,  465,  465,  465,  465,  532,  532,
      532,  532,  532,  532,  538,  538,  538,  538,  538,  538,
      550,  550,  550,  550,  550,  550,  558,  558,  558,  558,
      558,  558,  564,  564,  564,  564,  564,  564,  568,  568,
      568,  568,  568,  568,  572,  572,  572,  572,  572,  572,
      575,  575,  575,  575,  575,  575,  579,  579,  579,  579,
      579,  579,  581,  581,  581,  581,  581,  581,  589,  589,
      589,  589,  589,  589,  601,  601,  601,  601,  601,  601,
      603,  603,  603,  603,  603,  603,  608,  608,  608,  608,
      608,  608,  610,  610,  610,  610,  610,  610,  615,  615,

      615,  615,  615,  615,  618,  618,  618,  618,  618,  618,
      622,  622,  622,  622,  622,  622,  625,  625,  625,  625,
      625,  625,  643,  643,  643,  643,  643,  643,  645,  645,
      645,  645,  645,  645,  650,  650,  650,  650,  650,  650,
      653,  653,  653,  653,  653,  653,  664,  664,  664,  664,
      664,  664,  670,  670,  670,  670,  670,  670,  675,  675,
      675,  675,  675,  675,  685,  685,  685,  685,  685,  685,
      687,  687,  687,  687,  687,  687,  693,  693,  693,  693,
      693,  693,  696,  696,  696,  696,  696,  696,  586,  533,
      582,  580,  576,  573,  569,  559,  557,  556,  553,  549,

      548,  547,  546,  545,  544,  541,  540,  539,  537,  536,
      533,  466,  511,  510,  509,  507,  504,  503,  502,  501,
      498,  497,  496,  495,  494,  493,  490,  455,  466,  462,
      461,  460,  459,  458,  385,  454,  453,  452,  451,  450,
      449,  448,  447,  445,  444,  443,  442,  400,  393,  392,
      311,  311,  309,  309,  382,  381,  380,  379,  378,  377,
      374,  373,  372,  371,  370,  369,  278,  278,  278,  278,
      265,  265,  265,  265,  252,  252,  252,  252,  234,  234,
      234,  234,  222,  222,  222,  222,  327,  324,  192,  192,
      192,  192,  307,  167,  305,  304,  303,  302,  295,  282,

      278,  278,  269,  265,  265,  256,  252,  252,  245,  234,
      234,  226,  222,  222,  196,  192,  192,  190,  189,  187,
      185,  183,  182,  181,  167,  165,  162,  145,  710,   23,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710

    } ;

static yyconst flex_int16_t yy_chk[2599] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,   10,    9,   10,   30,   31,   36,   31,
       42,   36,   43,   46,   47,   45,   48,   57,   48,   47,
       42,   43,   45,   61,   46,   70,   79,   91,   30,   48,

       82,   94,   82,   94,  102,  112,  706,  121,  130,   57,
      139,  143,   79,   91,  315,   61,   46,   70,  157,  157,
      158,   48,  163,  315,  158,  163,  102,  112,   61,  121,
      130,  705,  139,  703,  143,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   25,   71,   25,   80,   33,
       66,   33,   66,   72,   74,   76,   74,   76,   78,   90,
       66,   81,  145,   84,   80,   84,   83,   86,   83,   86,
       88,   72,   88,   93,  103,   92,  106,   81,  106,  288,
       95,   97,   97,   97,  145,  702,  106,   80,  205,   93,
      122,   92,   95,   72,   83,  113,  701,   83,   81,   71,

      234,   71,   95,  131,  104,  146,   72,  114,   25,   32,
       93,   32,   33,   66,   92,   95,   83,   74,   76,   83,
       81,   78,   90,  161,  288,  114,   84,  146,  700,   83,
       86,  104,   93,   88,  104,   32,  103,   32,  103,  106,
       32,   32,  151,   32,   97,  161,  152,  114,  113,   32,
      113,  205,  122,  104,  122,  234,  104,   32,   32,   32,
      114,  699,   32,   32,  152,  131,  104,  131,  152,  300,
      151,  151,   32,   68,   68,  300,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  108,
      109,  174,  179,  178,  179,  109,  108,  109,  175,  185,
      175,  186,  174,  175,  178,  179,  196,  108,  109,  180,
      333,  180,  188,  188,  180,  212,  212,  206,  239,  333,
      239,  185,  239,  186,  174,  239,  178,  179,  196,  108,
      109,  110,  110,  206,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  116,
      116,  116,  149,  194,  149,  197,  203,  207,  203,  200,
      208,  226,  217,  227,  390,  243,  319,  243,  245,  243,
      236,  194,  243,  207,  246,  256,  208,  197,  217,  391,
      390,  698,  334,  226,  203,  227,  207,  203,  236,  208,
      245,  334,  338,  194,  696,  391,  246,  256,  337,  338,
      695,  149,  149,  200,  200,  319,  203,  337,  207,  203,
      236,  208,  116,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  123,  125,  125,  125,  211,  218,  211,  231,  219,
      224,  238,  241,  657,  257,  260,  242,  269,  238,  241,
      270,  242,  218,  242,  123,  219,  282,  283,  123,  238,
      241,  292,  123,  211,  242,  218,  257,  224,  219,  269,
      224,  693,  270,  692,  690,  687,  123,  685,  282,  283,

      123,  238,  241,  292,  123,  211,  242,  218,  231,  224,
      219,  260,  224,  123,  657,  125,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  132,  134,  134,  134,  230,  240,
      249,  289,  273,  346,  254,  365,  293,  312,  313,  339,

      316,  317,  328,  340,  329,  343,  339,  132,  344,  341,
      683,  132,  340,  682,  347,  132,  341,  254,  293,  312,
      313,  254,  316,  317,  328,  254,  329,  343,  680,  132,
      344,  679,  346,  132,  249,  249,  347,  132,  273,  254,
      289,  230,  230,  254,  240,  365,  132,  254,  134,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  140,  261,  141,
      141,  141,  142,  160,  142,  160,  192,  193,  192,  193,
      202,  204,  202,  204,  216,  274,  192,  193,  214,  215,
      214,  215,  223,  223,  223,  262,  235,  141,  235,  237,
      330,  253,  253,  253,  675,  275,  235,  318,  237,  266,
      266,  266,  398,  279,  279,  279,  674,  141,  141,  141,
      287,  261,  261,  314,  290,  314,  267,  342,  398,  140,
      673,  140,  141,  314,  342,  142,  160,  350,  274,  274,
      193,  192,  331,  202,  204,  320,  321,  216,  668,  267,

      262,  214,  215,  267,  356,  223,  318,  267,  330,  235,
      275,  320,  321,  237,  253,  280,  280,  280,  286,  286,
      286,  267,  266,  287,  287,  267,  279,  290,  290,  267,
      345,  320,  321,  324,  325,  324,  326,  348,  314,  351,
      331,  349,  324,  280,  352,  350,  332,  332,  332,  336,
      325,  353,  326,  320,  321,  332,  354,  355,  336,  348,
      357,  358,  356,  280,  280,  280,  286,  286,  286,  359,
      325,  360,  326,  353,  361,  362,  363,  364,  354,  345,
      373,  366,  324,  382,  404,  388,  408,  351,  324,  389,
      399,  359,  325,  360,  326,  332,  349,  403,  394,  352,

      394,  332,  373,  407,  420,  382,  399,  394,  357,  424,
      389,  382,  355,  336,  404,  425,  358,  405,  405,  405,
      430,  409,  411,  426,  363,  388,  405,  427,  361,  366,
      409,  411,  389,  362,  408,  364,  404,  421,  412,  414,
      415,  417,  431,  432,  420,  433,  403,  412,  414,  415,
      417,  436,  407,  426,  426,  437,  456,  438,  421,  439,
      441,  440,  463,  444,  425,  464,  424,  467,  472,  451,
      474,  451,  457,  432,  432,  426,  426,  430,  451,  468,
      421,  475,  476,  427,  469,  470,  411,  438,  459,  471,
      441,  431,  473,  469,  470,  432,  432,  477,  471,  436,

      479,  433,  480,  414,  437,  417,  440,  481,  439,  438,
      459,  456,  441,  457,  482,  464,  484,  467,  441,  444,
      485,  486,  459,  472,  506,  488,  463,  489,  468,  474,
      513,  517,  476,  473,  478,  478,  478,  483,  483,  483,
      496,  505,  496,  478,  520,  475,  483,  515,  507,  496,
      505,  499,  477,  499,  509,  516,  509,  481,  521,  479,
      499,  518,  524,  509,  516,  526,  480,  527,  531,  482,
      507,  486,  534,  537,  484,  535,  567,  628,  537,  506,
      514,  514,  514,  584,  485,  488,  517,  550,  489,  514,
      667,  571,  518,  524,  513,  552,  550,  515,  522,  522,

      522,  528,  528,  528,  552,  574,  578,  522,  520,  542,
      528,  542,  585,  521,  518,  524,  664,  544,  542,  544,
      663,  554,  527,  554,  628,  534,  544,  535,  564,  526,
      554,  567,  531,  551,  551,  551,  556,  564,  556,  561,
      561,  561,  584,  551,  565,  556,  566,  571,  561,  563,
      563,  563,  592,  565,  592,  566,  617,  594,  563,  594,
      574,  592,  578,  597,  600,  597,  594,  599,  599,  599,
      601,  585,  621,  600,  602,  602,  602,  599,  605,  601,
      605,  612,  612,  612,  602,  614,  615,  605,  616,  649,
      612,  627,  627,  627,  614,  615,  641,  616,  551,  652,

      629,  633,  629,  633,  636,  641,  636,  645,  565,  629,
      633,  617,  640,  640,  640,  647,  645,  648,  655,  655,
      655,  658,  640,  658,  647,  669,  648,  621,  597,  666,
      658,  666,  599,  670,  669,  672,  677,  677,  677,  602,
      684,  681,  670,  681,  672,  649,  689,  689,  689,  684,
      662,  660,  616,  691,  656,  652,  627,  653,  691,  650,
      643,  642,  639,  638,  637,  635,  632,  631,  630,  636,
      625,  624,  622,  620,  618,  613,  610,  640,  608,  647,
      607,  603,  598,  655,  596,  591,  589,  588,  587,  586,
      583,  581,  579,  577,  666,  575,  572,  570,  568,  672,

      562,  677,  560,  558,  557,  553,  681,  549,  548,  547,
      546,  689,  711,  711,  712,  712,  712,  712,  712,  712,
      713,  713,  713,  713,  713,  713,  714,  714,  715,  715,
      545,  715,  715,  715,  716,  541,  716,  716,  717,  717,
      717,  718,  540,  718,  718,  719,  719,  719,  720,  720,
      720,  720,  720,  720,  721,  721,  538,  721,  721,  721,
      722,  722,  722,  722,  722,  722,  723,  723,  723,  723,
      723,  723,  724,  724,  724,  724,  724,  724,  725,  725,
      725,  725,  725,  725,  726,  726,  726,  726,  726,  726,
      727,  727,  727,  727,  727,  727,  728,  728,  728,  728,

      728,  728,  729,  729,  729,  729,  729,  729,  730,  730,
      730,  730,  730,  730,  731,  731,  731,  731,  731,  731,
      732,  732,  732,  732,  732,  732,  733,  733,  733,  733,
      733,  733,  734,  734,  734,  734,  734,  734,  735,  735,
      735,  735,  735,  735,  736,  736,  736,  736,  736,  736,
      737,  737,  737,  737,  737,  737,  738,  738,  738,  738,
      738,  738,  739,  739,  739,  739,  739,  739,  740,  740,
      740,  740,  740,  740,  741,  741,  741,  741,  741,  741,
      742,  742,  742,  742,  742,  742,  743,  743,  743,  743,
      743,  743,  744,  744,  744,  744,  744,  744,  745,  745,

      745,  745,  745,  745,  746,  746,  746,  746,  746,  746,
      747,  747,  747,  747,  747,  747,  748,  748,  748,  748,
      748,  748,  749,  749,  749,  749,  749,  749,  750,  750,
      750,  750,  750,  750,  751,  751,  751,  751,  751,  751,
      752,  752,  752,  752,  752,  752,  753,  753,  753,  753,
      753,  753,  754,  754,  754,  754,  754,  754,  755,  755,
      755,  755,  755,  755,  756,  756,  756,  756,  756,  756,
      757,  757,  757,  757,  757,  757,  758,  758,  758,  758,
      758,  758,  759,  759,  759,  759,  759,  759,  536,  532,
      530,  529,  525,  523,  519,  512,  511,  510,  508,  504,

      503,  502,  501,  498,  497,  495,  494,  493,  491,  490,
      487,  465,  462,  461,  460,  458,  455,  454,  453,  452,
      450,  449,  448,  447,  446,  445,  443,  442,  406,  400,
      397,  396,  393,  392,  385,  381,  380,  379,  378,  377,
      376,  375,  374,  372,  371,  370,  369,  327,  323,  322,
      311,  310,  309,  308,  306,  305,  304,  303,  302,  301,
      299,  298,  297,  296,  295,  294,  291,  285,  284,  277,
      276,  272,  271,  264,  263,  259,  258,  251,  250,  248,
      247,  233,  232,  229,  228,  221,  220,  213,  201,  199,
      198,  191,  168,  166,  156,  155,  154,  153,  150,  138,

      136,  133,  129,  127,  124,  120,  118,  115,  111,  107,
      105,  101,   99,   96,   69,   67,   65,   63,   62,   60,
       56,   53,   52,   51,   39,   38,   35,   29,   23,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710

    } ;

static yyconst flex_int16_t yy_rule_linenum[104] =
    {   0,
      119,  120,  121,  122,  126,  127,  128,  129,  130,  132,
      133,  135,  144,  145,  173,  209,  233,  239,  260,  267,
      278,  283,  297,  302,  309,  332,  343,  345,  359,  372,
      397,  403,  408,  413,  418,  428,  436,  444,  453,  481,
      502,  503,  504,  505,  507,  512,  537,  539,  541,  580,
      581,  584,  586,  594,  595,  596,  597,  598,  599,  600,
      601,  602,  603,  604,  605,  606,  607,  608,  609,  610,
      611,  612,  613,  614,  615,  616,  617,  618,  619,  620,
      621,  622,  623,  624,  625,  626,  627,  628,  629,  630,
      636,  642,  654,  674,  676,  678,  695,  711,  712,  722,

      725,  726,  728
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* -*- Mode: c++ -*- */
/*
 * Copyright(C) 1999-2022 National Technology & Engineering Solutions
 * of Sandia, LLC (NTESS).  Under the terms of Contract DE-NA0003525 with
 * NTESS, the U.S. Government retains certain rights in this software.
 *
 * See packages/seacas/LICENSE for details
 */

#include <fstream>
#include <iostream>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

#include "apr_scanner.h"
#include "aprepro.h"
#include "apr_util.h"
#include "apr_getline.h"

#define YY_NO_UNISTD_H
/* import the parser's token type into a local typedef */
typedef SEAMS::Parser::token token;
typedef SEAMS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

#define show(x)   *(aprepro->infoStream) << "<" << x << ">" << std::flush;
 namespace SEAMS {
   extern bool echo;
   void yyerror(const char *s);
 }

namespace {
  bool begin_double_brace = false;
  bool end_double_brace = false;
  bool string_is_ascii(const char *line, size_t len)
  {
    for (size_t i = 0; i < len; i++) {
      if (!(std::isspace(line[i]) || std::isprint(line[i]))) {
        return false;
      }
    }
    return true;
  }
} // namespace

int file_must_exist = 0; /* Global used by include/conditional include */

/* Global variables used by the looping mechanism */
 SEAMS::file_rec *outer_file = nullptr;
int loop_lvl = 0;
std::fstream *tmp_file;
const char  *temp_f;

#if defined __NVCC__
#pragma diag_suppress code_is_unreachable
#endif

#define MAX_IF_NESTING 1024

 int if_state[MAX_IF_NESTING] = {0}; // INITIAL
 int if_case_run[MAX_IF_NESTING] = {false}; /* Has any if or elseif condition executed */
 int if_lvl = 0;
 int if_skip_level = 0;
bool suppress_nl = false;
 bool switch_active = false;   // Are we in a switch
 bool switch_case_run = false; // has there been a case which matched condition run?
 bool switch_skip_to_endcase = false;
 double switch_condition = 0.0; // Value specified in "switch(condition)"

// For substitution history
size_t curr_index = 0;
std::string history_string;
size_t hist_start = 0;

#define YY_USER_ACTION curr_index += yyleng;

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SEAMSFlexLexer" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* enables the use of start condition stacks */

#define INITIAL 0
#define PARSING 1
#define GET_FILENAME 2
#define IF_SKIP 3
#define GET_VAR 4
#define VERBATIM 5
#define IF_WHILE_SKIP 6
#define GET_LOOP_VAR 7
#define LOOP 8
#define LOOP_SKIP 9
#define END_CASE_SKIP 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 711 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2530 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 104 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 104 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 105 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN(INITIAL);   }
	YY_BREAK
case 2:
case 3:
YY_RULE_SETUP
{ if (echo) ECHO; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
{ if (echo) ECHO; aprepro.ap_file_list.top().lineno++; }
	YY_BREAK

case 5:
YY_RULE_SETUP
{ BEGIN(VERBATIM);  }
	YY_BREAK
case 6:
case 7:
YY_RULE_SETUP
{ echo = true;      }
	YY_BREAK
case 8:
case 9:
YY_RULE_SETUP
{ echo = false;     }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ aprepro.stateImmutable = true;    }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ aprepro.stateImmutable = aprepro.ap_options.immutable; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
    BEGIN(GET_LOOP_VAR);
    if (aprepro.ap_options.debugging)
      std::cerr << "DEBUG LOOP - Found loop begin test " << yytext << " in file "
                << aprepro.ap_file_list.top().name << " at line " << aprepro.ap_file_list.top().lineno << "\n";
  }
	YY_BREAK

case 13:
/* rule 13 can match eol */
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{
    aprepro.ap_file_list.top().lineno++;
    /* Loop control defined by integer */
    char *pt = strchr(yytext, ')');
    *pt = '\0';
    sscanf (yytext, "%lf", &yylval->val);

    if (yylval->val <= 0) {
      BEGIN(LOOP_SKIP);
    }
    else {/* Value defined and != 0. */
      temp_f = get_temp_filename();
      SEAMS::file_rec new_file(temp_f, 0, true, (int)yylval->val);
      if (aprepro.ap_options.debugging)
        std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
                  << " in file " << aprepro.ap_file_list.top().name
                  << " at line " << aprepro.ap_file_list.top().lineno-1 << "\n";

      outer_file = &aprepro.ap_file_list.top();
      aprepro.ap_file_list.push(new_file);

      tmp_file = new std::fstream(temp_f, std::ios::out);
      loop_lvl++;
      BEGIN(LOOP);
    }
    aprepro.isCollectingLoop = true;
  }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{
    aprepro.ap_file_list.top().lineno++;
    /* Loop control defined by variable */
    symrec *s;
    char *pt = strchr(yytext, ')');
    *pt = '\0';
    if (!check_valid_var(yytext)) {
      aprepro.warning("Invalid variable name syntax '" + std::string(yytext) + "'");
      BEGIN(LOOP_SKIP);
    } else {
      s = aprepro.getsym(yytext);

      if (s == nullptr || (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.)) {
        BEGIN(LOOP_SKIP);
      }
      else { /* Value defined and != 0. */
        if (aprepro.ap_options.debugging)
          std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
                    << " in file " << aprepro.ap_file_list.top().name
                    << " at line " << aprepro.ap_file_list.top().lineno-1 << "\n";

        temp_f = get_temp_filename();
        SEAMS::file_rec new_file(temp_f, 0, true, (int)s->value.var);
        outer_file = &aprepro.ap_file_list.top();
        aprepro.ap_file_list.push(new_file);

        tmp_file = new std::fstream(temp_f, std::ios::out);
        loop_lvl++;
        BEGIN(LOOP);
      }
    }
    aprepro.isCollectingLoop = true;
  }
	YY_BREAK

case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{
    outer_file->lineno++;
    if(loop_lvl > 0)
      --loop_lvl;

    if (loop_lvl == 0) {
      BEGIN(INITIAL);
      tmp_file->close();
      delete tmp_file;

      if(!aprepro.doLoopSubstitution)
        yy_push_state(VERBATIM);

      aprepro.isCollectingLoop = false;

      yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
      yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
      curr_index = 0;
    }
    else {
      (*tmp_file) << yytext;
    }
  }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{
    loop_lvl++; /* Nested Loop */
    (*tmp_file) << yytext;
    outer_file->lineno++;
  }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{
    if(aprepro.ap_options.interactive ||
       aprepro.string_interactive())
    {
      aprepro.warning("Aborting loop(s).", false);

      // Leave the looping state and remove the loop file
      BEGIN(INITIAL);
      tmp_file->close();
      delete tmp_file;

      if(aprepro.ap_file_list.top().tmp_file) {
        remove(aprepro.ap_file_list.top().name.c_str());
        aprepro.ap_file_list.pop();
      }

      loop_lvl = 0;
      aprepro.isCollectingLoop = false;
    }
  }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{
    (*tmp_file) << yytext;
    outer_file->lineno++;
  }
	YY_BREAK

case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{
    aprepro.ap_file_list.top().lineno++;
    if(loop_lvl > 0)
      --loop_lvl;

    if (loop_lvl == 0) {
      BEGIN(INITIAL);
      aprepro.isCollectingLoop = false;
    }
  }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
    loop_lvl++; /* Nested Loop */
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{
    if(aprepro.ap_options.interactive ||
       aprepro.string_interactive())
    {
      aprepro.warning("Aborting loops(s).", false);

      // Leave the looping state
      BEGIN(INITIAL);

      loop_lvl = 0;
      aprepro.isCollectingLoop = false;
    }
  }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ /* Do not increment line count */
    ;
  }
	YY_BREAK

case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
  yyless(0);
  curr_index = 0;
  BEGIN(INITIAL);
  switch_skip_to_endcase = false;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{
 if (!switch_active) {
    yyerror("default statement found outside switch statement.");
  }

  if (!switch_case_run) {
    switch_case_run = true;
    BEGIN(INITIAL);
    switch_skip_to_endcase = false;
    if (aprepro.ap_options.debugging)
      fprintf (stderr, "DEBUG SWITCH: 'default' code executing at line %d\n",
               aprepro.ap_file_list.top().lineno);
  }
  else {
    if (aprepro.ap_options.debugging)
      fprintf (stderr, "DEBUG SWITCH: 'default' not executing since a previous case already ran at line %d\n",
               aprepro.ap_file_list.top().lineno);

    /* Need to skip all code until end of case */
    BEGIN(END_CASE_SKIP);
  }
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{
  aprepro.ap_file_list.top().lineno++;
  BEGIN(INITIAL);
  switch_active = false;
  switch_skip_to_endcase = false;
  suppress_nl = false;
  if (aprepro.ap_options.debugging)
    fprintf (stderr, "DEBUG SWITCH: 'endswitch' at line %d\n",
             aprepro.ap_file_list.top().lineno);
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{  aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
  aprepro.ap_file_list.top().lineno++;
  if (!switch_active) {
    yyerror("endswitch statement found without matching switch.");
  }
  switch_active = false;
  switch_skip_to_endcase = false;
}
	YY_BREAK

/* This restores the old behavior of ifdef and ifndef
   * where they would eat up any leading whitespace on
   * a line.
   */
case 29:
YY_RULE_SETUP
{
    // Used to avoid undefined variable warnings in old ifdef/ifndef construct
    aprepro.inIfdefGetvar = true;
    unput('(');
    unput('f');
    unput('e');
    unput('d');
    unput('f');
    unput('i');
    unput('_');
    unput('{');
  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
    // Used to avoid undefined variable warnings in old ifdef/ifndef construct
    aprepro.inIfdefGetvar = true;
    unput('(');
    unput('f');
    unput('e');
    unput('d');
    unput('n');
    unput('f');
    unput('i');
    unput('_');
    unput('{');
  }
	YY_BREAK

/* If an if was found while skipping, then eat
   * that entire if block until endif
   * found since there is no way that
   * any of the code in that if block could be executed.
   * Make sure to handle multiple levels of skipped ifs...
   *
   * NOTE: if_lvl was not incremented, so don't need to decrement when
   *       endif found.
   */
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{
    aprepro.ap_file_list.top().lineno++;
    if (--if_skip_level == 0)
      BEGIN(IF_SKIP);
  }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{
    aprepro.ap_file_list.top().lineno++;
    if_skip_level++;
  }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{
    aprepro.ap_file_list.top().lineno++;
    if_skip_level++;
  }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
    aprepro.ap_file_list.top().lineno++;
    if_skip_level++;
  }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK

/* IF an if, ifdef, or ifndef found while skipping, then
   * skip the entire block up and including the endif.
   * The (IF_WHILE_SKIP) start condition handles this skipping.
   */
case 36:
YY_RULE_SETUP
{
    if (aprepro.ap_options.debugging)
      fprintf (stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
               aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
    if (aprepro.ap_options.debugging)
      fprintf (stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
               aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
    if (aprepro.ap_options.debugging)
      fprintf (stderr, "DEBUG IF: 'ifndef'  found while skipping at line %d\n",
               aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK

case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{
  aprepro.ap_file_list.top().lineno++;
  if (aprepro.ap_options.debugging)
    fprintf (stderr, "DEBUG IF: 'else'   at level = %d at line %d\n",
             if_lvl, aprepro.ap_file_list.top().lineno);
  if(YY_START == VERBATIM) {
    if(echo) ECHO;
  }
  else if (if_state[if_lvl] == IF_SKIP) {
    if (!if_case_run[if_lvl]) {
      BEGIN(INITIAL);
      if_state[if_lvl] = INITIAL;
      if_case_run[if_lvl] = true;
    } else {
      BEGIN(IF_SKIP);
      if_state[if_lvl] = IF_SKIP;
    }
  }
  else if (if_state[if_lvl] == INITIAL) {
    BEGIN(IF_SKIP);
    if_state[if_lvl] = IF_SKIP;
  }

  /* If neither is true, this is a nested
     if that should be skipped */
}
	YY_BREAK

case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
    /* If any previous 'block' of this if has executed, then
     * just skip this block; otherwise see if condition is
     * true and execute this block
     */
    if (aprepro.ap_options.debugging)
      fprintf (stderr, "DEBUG IF: 'elseif'   at level = %d at line %d\n",
               if_lvl, aprepro.ap_file_list.top().lineno);

    if (if_case_run[if_lvl]) { /* A previous else/elseif has run */
      aprepro.ap_file_list.top().lineno++;
      /* Already in IF_SKIP, so don't need to change state */
    } else {
      /* Need to check the elseif condition; push back and parse */
      yyless(0);
      curr_index = 0;
      BEGIN(INITIAL);
      if_state[if_lvl] = INITIAL;
    }
  }
	YY_BREAK
case 41:
case 42:
case 43:
case 44:
YY_RULE_SETUP
{ ; }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{
     aprepro.ap_file_list.top().lineno++;
   }
	YY_BREAK

case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{

    if(YY_START == VERBATIM) {
      if(echo) ECHO;
    }
    else {
      if (if_state[if_lvl] == IF_SKIP ||
          if_state[if_lvl] == INITIAL) {
            BEGIN(INITIAL);
            suppress_nl = false;
      }
                           /* If neither is true, this is a nested
                              if that should be skipped */
      if (aprepro.ap_options.debugging)
        printf ("DEBUG IF: 'endif'  at level = %d at line %d\n",
                if_lvl, aprepro.ap_file_list.top().lineno);
      if (--if_lvl < 0) {
        if_lvl = 0;
        yyerror("Improperly Nested ifdef/ifndef statements");
      }
      /* Ignore endif if not skipping */
    }
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ BEGIN(GET_FILENAME);
                             file_must_exist = true; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ BEGIN(GET_FILENAME);
                             file_must_exist = false; }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{
  aprepro.ap_file_list.top().lineno++;
  BEGIN(INITIAL);
  {
    symrec *s;
    int quoted = 0;
    char *pt = strchr(yytext, ')');
    *pt = '\0';
    /* Check to see if surrounded by double quote */
    if ((pt = strchr(yytext, '"')) != nullptr) {
      yytext++;
      quoted = 1;
    }
    if ((pt = strrchr(yytext, '"')) != nullptr) {
      *pt = '\0';
      quoted = 1;
    }

    if (quoted == 0) {
      /* See if this is an aprepro variable referring to a name */
      s = aprepro.getsym(yytext);
      if (s == nullptr || (s->type != token::SVAR && s->type != token::IMMSVAR)) {
        pt = yytext;
      } else {
        pt = (char*)s->value.svar.c_str();
      }
    } else {
      pt = yytext;
    }

    add_include_file(pt, file_must_exist);

    if(!aprepro.doIncludeSubstitution)
      yy_push_state(VERBATIM);

    aprepro.ap_file_list.top().lineno++;
  }
}
	YY_BREAK
case 50:
case 51:
YY_RULE_SETUP
{ sscanf (yytext, "%lf", &yylval->val);
                       return(token::NUM); }
	YY_BREAK
case 52:
YY_RULE_SETUP
; // Empty rule
	YY_BREAK
case 53:
YY_RULE_SETUP
{
           symrec *s;
                             s = aprepro.getsym(yytext);
                             if (s == nullptr)
                               s = aprepro.putsym (yytext, SEAMS::Aprepro::SYMBOL_TYPE::UNDEFINED_VARIABLE, false);
                             yylval->tptr = s;
                             return((token::yytokentype)s->type);
                           }
	YY_BREAK
case 54:
YY_RULE_SETUP
return(token::EQUAL);
	YY_BREAK
case 55:
YY_RULE_SETUP
return(token::EQ_PLUS);
	YY_BREAK
case 56:
YY_RULE_SETUP
return(token::EQ_MINUS);
	YY_BREAK
case 57:
YY_RULE_SETUP
return(token::EQ_TIME);
	YY_BREAK
case 58:
YY_RULE_SETUP
return(token::EQ_DIV);
	YY_BREAK
case 59:
YY_RULE_SETUP
return(token::EQ_POW);
	YY_BREAK
case 60:
YY_RULE_SETUP
return(token::EQ_POW);
	YY_BREAK
case 61:
YY_RULE_SETUP
return(token::INC);
	YY_BREAK
case 62:
YY_RULE_SETUP
return(token::DEC);
	YY_BREAK
case 63:
YY_RULE_SETUP
return(token::PLU);
	YY_BREAK
case 64:
YY_RULE_SETUP
return(token::SUB);
	YY_BREAK
case 65:
YY_RULE_SETUP
return(token::TIM);
	YY_BREAK
case 66:
YY_RULE_SETUP
return(token::TIM);          /* ~ is same as multiply */
	YY_BREAK
case 67:
YY_RULE_SETUP
return(token::CONCAT);       /* String concatenation */
	YY_BREAK
case 68:
YY_RULE_SETUP
return(token::DIV);
	YY_BREAK
case 69:
YY_RULE_SETUP
return(token::MOD);
	YY_BREAK
case 70:
YY_RULE_SETUP
return(token::POW);
	YY_BREAK
case 71:
YY_RULE_SETUP
return(token::POW);
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
aprepro.ap_file_list.top().lineno++;
	YY_BREAK
case 73:
YY_RULE_SETUP
return(token::LPAR);
	YY_BREAK
case 74:
YY_RULE_SETUP
return(token::RPAR);
	YY_BREAK
case 75:
YY_RULE_SETUP
return(token::COMMA);
	YY_BREAK
case 76:
YY_RULE_SETUP
return(token::SEMI);
	YY_BREAK
case 77:
YY_RULE_SETUP
return(token::COLON);
	YY_BREAK
case 78:
YY_RULE_SETUP
return(token::QUEST);
	YY_BREAK
case 79:
YY_RULE_SETUP
return(token::LT);
	YY_BREAK
case 80:
YY_RULE_SETUP
return(token::GT);
	YY_BREAK
case 81:
YY_RULE_SETUP
return(token::LE);
	YY_BREAK
case 82:
YY_RULE_SETUP
return(token::GE);
	YY_BREAK
case 83:
YY_RULE_SETUP
return(token::EQ);
	YY_BREAK
case 84:
YY_RULE_SETUP
return(token::NE);
	YY_BREAK
case 85:
YY_RULE_SETUP
return(token::LAND);
	YY_BREAK
case 86:
YY_RULE_SETUP
return(token::LOR);
	YY_BREAK
case 87:
YY_RULE_SETUP
return(token::NOT);
	YY_BREAK
case 88:
YY_RULE_SETUP
return(token::LBRACK);
	YY_BREAK
case 89:
YY_RULE_SETUP
return(token::RBRACK);
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{
           char *pt = strrchr(yytext, '"');
                             *pt = '\0';
                             new_string(yytext+1, &yylval->string);
                             return token::QSTRING; }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
           char *pt = strrchr(yytext, '\'');
                             *pt = '\0';
                             new_string(yytext+1, &yylval->string);
                             return token::QSTRING; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
  // Add to the history string
  save_history_string();

  if (switch_skip_to_endcase)
    BEGIN(END_CASE_SKIP);
  else
    BEGIN(if_state[if_lvl]);
  return(token::RBRACE);
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
  if (begin_double_brace) {
    end_double_brace = true;
  }
  else {
    yyerror("Found an unexpected double end brace ('}}').\n\t"
            "It can only end an expression started with a double brace ('{{').\n\tCheck syntax.");
  }

  // Add to the history string
  save_history_string();

  if (switch_skip_to_endcase)
    BEGIN(END_CASE_SKIP);
  else
    BEGIN(if_state[if_lvl]);
  return(token::RBRACE);
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ if (echo) LexerOutput("{", 1); }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ if (echo) LexerOutput("}", 1); }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    // Check if we need to save the substitution history first.
    if(aprepro.ap_options.keep_history &&
            (aprepro.ap_file_list.top().name != "_string_"))
    {
      if (curr_index > (size_t)yyleng)
        hist_start = curr_index - yyleng;
      else
        hist_start = 0;
    }

    BEGIN(PARSING);
    echo = false;
    begin_double_brace = true;
    return(token::LBRACE);
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    // Check if we need to save the substitution history first.
    if(aprepro.ap_options.keep_history &&
            (aprepro.ap_file_list.top().name != "_string_"))
    {
      if (curr_index > (size_t)yyleng)
        hist_start = curr_index - yyleng;
      else
        hist_start = 0;
    }

    BEGIN(PARSING);

    return(token::LBRACE);
  }
	YY_BREAK
case 98:
case 99:
YY_RULE_SETUP
{
  if (aprepro.ap_options.end_on_exit) {
    if (echo) ECHO;
    return((token::yytokentype)-1);
  }
  else
    if (echo) ECHO;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ if (echo) ECHO; }
	YY_BREAK
case 101:
case 102:
YY_RULE_SETUP
{ if (echo && if_state[if_lvl] != IF_SKIP) ECHO; }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ if (echo && !suppress_nl) ECHO; suppress_nl = false;
                             if (end_double_brace) {
                                echo = true;
                                begin_double_brace = false;
                                end_double_brace = false;
                             }
                             aprepro.ap_file_list.top().lineno++;
                           }
	YY_BREAK
case 104:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSING):
case YY_STATE_EOF(GET_FILENAME):
case YY_STATE_EOF(IF_SKIP):
case YY_STATE_EOF(GET_VAR):
case YY_STATE_EOF(VERBATIM):
case YY_STATE_EOF(IF_WHILE_SKIP):
case YY_STATE_EOF(GET_LOOP_VAR):
case YY_STATE_EOF(LOOP):
case YY_STATE_EOF(LOOP_SKIP):
case YY_STATE_EOF(END_CASE_SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SEAMSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SEAMSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SEAMSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SEAMSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 711 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 711 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 710);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SEAMSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SEAMSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SEAMSfree((void *) b->yy_ch_buf  );

	SEAMSfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SEAMSalloc(new_size  );

		else
			(yy_start_stack) = (int *) SEAMSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SEAMSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SEAMSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SEAMSfree (void * ptr )
{
	free( (char *) ptr );	/* see SEAMSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

    /* When the scanner receives an end-of-file indication from YY_INPUT, it then
     * checks the yywrap() function. If yywrap() returns false (zero), then it is
     * assumed that the function has gone ahead and set up `yyin' to point to
     * another input file, and scanning continues. If it returns true (non-zero),
     * then the scanner terminates, returning 0 to its caller. */

    namespace SEAMS
{

  Scanner::Scanner(Aprepro & aprepro_yyarg, std::istream * in, std::ostream * out)
      : SEAMSFlexLexer(in, out), aprepro(aprepro_yyarg)
  {
    aprepro.outputStream.push(out);
  }

  Scanner::~Scanner() {
    while (aprepro.ap_file_list.size() > 1) {
      auto kk = aprepro.ap_file_list.top();
      if (kk.name != "STDIN") {
        yyFlexLexer::yy_load_buffer_state();
        delete yyin;
        yyin = nullptr;
      }
      aprepro.ap_file_list.pop();
      yyFlexLexer::yypop_buffer_state();
    };
  }

  bool Scanner::add_include_file(const std::string &filename, bool must_exist)
  {
    std::fstream *yytmp = nullptr;
    if (must_exist)
      yytmp = aprepro.open_file(filename, "r");
    else
      yytmp = aprepro.check_open_file(filename, "r");

    if (yytmp) {
      if (yyin && !yy_init) {
        yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
      }

      yyin = yytmp;
      aprepro.info("Included File: '" + filename + "'", true);

      SEAMS::file_rec new_file(filename.c_str(), 0, false, 0);
      aprepro.ap_file_list.push(new_file);

      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yytmp, YY_BUF_SIZE));
      curr_index = 0;
    }
    return yytmp != nullptr;
  }

  void Scanner::LexerOutput(const char *buf, int size)
  {
    // Do this before writing so that we have the correct index in the
    // output stream.
    if (aprepro.ap_options.keep_history) {
      aprepro.add_history(history_string, buf);
      history_string.clear();
      hist_start = 0;
    }

    aprepro.outputStream.top()->write(buf, size);
    if (aprepro.ap_options.interactive && aprepro.outputStream.size() == 1) {
      // In interactive mode, output to stdout in addition to the
      // output stream, unless user has redirected output...
      std::cout << buf;
    }
  }

  int Scanner::LexerInput(char *buf, int max_size)
  {
    if (yyin->eof() || yyin->fail()) {
      return 0;
    }

    if (aprepro.ap_options.interactive && yyin == &std::cin && isatty(0) != 0 && isatty(1) != 0) {
      char *line = SEAMS::getline_int(nullptr);

      if (strlen(line) == 0) {
        return 0;
      }

      if (!string_is_ascii(line, strlen(line))) {
        yyerror("input line contains non-ASCII (probably UTF-8) characters which will most likely "
                "be parsed incorrectly.");
      }

      SEAMS::gl_histadd(line);

      if (strlen(line) > (size_t)max_size - 2) {
        yyerror("input line is too long");
        return 0;
      }

      strcpy(buf, line);
      strcat(buf, "\n");

      return strlen(buf);
    }
    else {
      (void)yyin->read(buf, max_size);

      if (yyin->bad()) {
        return -1;
      }
      else {
        if (!string_is_ascii(buf, yyin->gcount())) {
          yyerror("input file contains non-ASCII (probably UTF-8) characters which will most likely "
                  "be parsed incorrectly.");
        }
        return yyin->gcount();
      }
    }
  }

  int Scanner::yywrap()
  {
    // Clear the history string.
    history_string.clear();
    hist_start = 0;
    curr_index = 0;

    // If we are using the string interactive method, we want to return to
    // our original state if parsing was cutoff prematurely.
    if (aprepro.string_interactive() && YY_START == PARSING) {
      if (switch_skip_to_endcase) {
        BEGIN(END_CASE_SKIP);
      }
      else {
        BEGIN(if_state[if_lvl]);
      }
    }

    if (aprepro.ap_file_list.size() <= 1) { /* End of main file, not in nested include */
      return (1);
    }
    else if (aprepro.string_interactive() && loop_lvl) {
      return (1);
    }
    else if (aprepro.isCollectingLoop) {
      yyerror("End-of-file detected inside loop. Check loop syntax. {endloop} must be on line by "
              "itself.");
      return (1);
    }
    else {
      /* We are in an included or looping file */
      if (aprepro.ap_file_list.top().tmp_file) {
        if (aprepro.ap_options.debugging) {
          std::cerr << "DEBUG LOOP: Loop count = " << aprepro.ap_file_list.top().loop_count << "\n";
        }
        if (--aprepro.ap_file_list.top().loop_count <= 0) {
          // On Windows, you can't remove the temp file until all the references to the
          // file object have been released, so we will delete it here.
          delete yyin;
          yyin = nullptr;

          if (aprepro.ap_file_list.top().name != "_string_") {
            if (!aprepro.ap_options.debugging) {
              remove(aprepro.ap_file_list.top().name.c_str()); /* Delete file if temporary */
            }
            if (!aprepro.doLoopSubstitution) {
              yy_pop_state();
            }
          }

          aprepro.ap_file_list.pop();
          yyFlexLexer::yypop_buffer_state();
        }
        else {
          // Do not pop ap_file_list; we are rereading that file...
          delete yyin;
          yyin = nullptr;
          yyFlexLexer::yypop_buffer_state();
          yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
          yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
          aprepro.ap_file_list.top().lineno = 0;
        }
      }
      else {
        delete yyin;
        yyin = nullptr;
        aprepro.ap_file_list.pop();
        yyFlexLexer::yypop_buffer_state();

        if (aprepro.ap_file_list.top().name == "standard input") {
          yyin = &std::cin;
        }

        /* Turn echoing back on at end of included files. */
        echo = true;

        // If we are not doing aprepro substitutions for the included file, but
        // just collecting lines, pop the state from VERBATIM back to what it
        // was previously.
        if (!aprepro.doIncludeSubstitution) {
          yy_pop_state();
        }

        /* Set immutable mode back to global immutable
         * state at end of included file*/
        aprepro.stateImmutable = aprepro.ap_options.immutable;
      }

      // Reset the current character index.
      curr_index = 0;
      if (yyin != nullptr) {
        curr_index = yyin->tellg();
      }

      return (0);
    }
  }

  /* Print error message to standard error and return.  Note: internally
   *   'lineno' starts at zero.  To avoid confusion, we add 1 to value
   *   when it is output.
   */

  void Scanner::yyerror(const char *s) { aprepro.error(s); }

  char *Scanner::execute(char string[])
  {
    /* Push the contents of 'string' onto the stack to be reread.
     * 'string' will be surrounded by {} so it must be a valid expression.
     */

    /*
     * NOTE: The closing } has not yet been scanned in the call to execute();
     *       therefore, we read it ourselves using input(), then we push:
     *       '}{' + our string + '}'
     */
    int i;
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    // Increment curr_index to account for the '}' and save history
    curr_index++;
    save_history_string();

    /* Allocate space for string + '}' + '{' + end_of_string */
    std::string new_string;
    new_string += "}{";
    new_string += string;
    new_string += "}";

    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));

    auto ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    return (nullptr);
  }

  /* Push the contents of 'string' onto the stack to be reread.
   * 'string' will not be surrounded by {}.
   */

  char *Scanner::rescan(char *string)
  {
    int i;
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input(), then we push our
     *       string and then put the closing } back on the stack last
     *       (to be read first),
     */
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    // Increment curr_index to account for the '}' and save history
    curr_index++;
    save_history_string();

    {
      aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
      std::string new_string("}");
      new_string += string;

      auto ins = new std::istringstream(new_string); // Declare an input string stream.
      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    }
    return (nullptr);
  }

  char *Scanner::import_handler(char *string)
  {
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input().
     */
    int i = 0;
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    add_include_file(string, true);
    std::string info_string = std::string("Imported File: '") + string + "'";
    aprepro.info(info_string, true);

    if (!aprepro.doIncludeSubstitution) {
      yy_push_state(VERBATIM);
    }

    /*
     * Now we need to push back the closing } so it is the first thing read.
     * We no longer have the initial file stream (is is pushed down on stack)
     * so we need to add a new file stream consisting of just a single character.
     * Wasteful, but best I can come up with at this time.
     */
    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
    std::string new_string("}");
    auto        ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    
    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG IMPORT: " << string << "\n";
    }
    return (nullptr);
  }

  char *Scanner::if_handler(double x)
  {
    if_lvl++;
    if (if_lvl >= MAX_IF_NESTING) {
      yyerror("Too many nested if statements");
    }
    else {
      if (x == 0) {
        if_state[if_lvl]    = IF_SKIP;
        if_case_run[if_lvl] = false;
      }
      else {
        suppress_nl         = true;
        if_state[if_lvl]    = INITIAL;
        if_case_run[if_lvl] = true;
      }
      if (aprepro.ap_options.debugging) {
        std::cerr << "DEBUG IF: If level " << if_lvl << " " << if_state[if_lvl] << "\n";
      }
    }
    return (nullptr);
  }

  char *Scanner::elseif_handler(double x)
  {
    if (x == 0 || if_case_run[if_lvl]) {
      if_state[if_lvl] = IF_SKIP;
    }
    else {
      suppress_nl         = 1;
      if_state[if_lvl]    = INITIAL;
      if_case_run[if_lvl] = true;
    }
    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG IF: elseif at level " << if_lvl << " " << if_state[if_lvl] << "\n";
    }
    return (nullptr);
  }

  char *Scanner::switch_handler(double x)
  {
    // save that we are in a switch statement
    // save the value of 'x' for use in deciding which case to execute
    if (switch_active) {
      yyerror("switch statement found while switch already active. Nested switch not supported.");
    }

    switch_active          = true;
    switch_case_run        = false;
    switch_condition       = x;
    switch_skip_to_endcase = true; /* Skip everything until first case */
    suppress_nl            = true;

    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG SWITCH: 'switch' with condition = " << switch_condition << " at line "
                << aprepro.ap_file_list.top().lineno << "\n";
    }
    return (nullptr);
  }

  char *Scanner::case_handler(double x)
  {
    // make sure we are in a switch statement
    // if 'x' matches the value saved in the switch statement
    // and no other case has been executed, then
    // execute the code in the case and set a flag indicating
    // the switch has run;
    // if 'x' does not match the value saved, then skip to endcase
    suppress_nl = true;

    if (!switch_active) {
      yyerror("case statement found outside switch statement.");
    }

    if (!switch_case_run && x == switch_condition) {
      switch_case_run = true;
      if (aprepro.ap_options.debugging) {
        fprintf(stderr,
                "DEBUG SWITCH: 'case' condition = %g matches switch condition = %g at line %d\n", x,
                switch_condition, aprepro.ap_file_list.top().lineno);
      }
    }
    else {
      if (aprepro.ap_options.debugging) {
        fprintf(stderr, "DEBUG SWITCH: 'case' condition = %g does not match switch condition = %g "
                        "(or case already matched) at line %d\n",
                x, switch_condition, aprepro.ap_file_list.top().lineno);
      }

      // Need to skip all code until end of case
      switch_skip_to_endcase = true;
    }
    return (nullptr);
  }

  void Scanner::save_history_string()
  {
    if (!aprepro.ap_options.keep_history) {
      return;
    }

    // Don't do it if the file is the one used by execute and rescan.
    if (aprepro.ap_file_list.top().name == "_string_" ||
        aprepro.ap_file_list.top().name == "standard input") {
      return;
    }

    size_t hist_end = curr_index;
    size_t len      = hist_end - hist_start;

    if (len <= 0)
      return;

    // Go back in the stream to where we started keeping history.
    yyin->seekg(hist_start);
    if (!yyin->good()) {
      yyerror("Stream state bad in `save_history_string` seekg");
      return;
    }

    // Read everything up to this point again and save it.
    auto tmp = new char[len + 1];
    yyin->read(tmp, len);
    if (!yyin->good()) {
      yyerror("Stream state bad in `save_history_string` read");
      return;
    }
    tmp[len] = '\0';

    history_string = tmp;
    delete[] tmp;
    hist_start = 0;
  }
}

/* This implementation of SEAMSFlexLexer::yylex() is required to fill the
 * vtable of the class SEAMSFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
int SEAMSFlexLexer::yylex()
{
  std::cerr << "in SEAMSFlexLexer::yylex() !" << '\n';
  return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SEAMSFlexLexer::yywrap() { return 1; }

