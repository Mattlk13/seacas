
#line 3 "apr_scanner.cc"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION    2
#define YY_FLEX_MINOR_VERSION    5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer SEAMSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t   flex_int8_t;
typedef uint8_t  flex_uint8_t;
typedef int16_t  flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t  flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char        flex_int8_t;
typedef short int          flex_int16_t;
typedef int                flex_int32_t;
typedef unsigned char      flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int       flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <errno.h>
#include <iostream>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined(__STDC__)

#define YY_USE_CONST

#endif /* defined (__STDC__) */
#endif /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start)-1) / 2)
#define YYSTATE  YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE   1
#define EOB_ACT_LAST_MATCH    2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                                  \
  do {                                                                                             \
    /* Undo effects of setting up yytext. */                                                       \
    int yyless_macro_arg = (n);                                                                    \
    YY_LESS_LINENO(yyless_macro_arg);                                                              \
    *yy_cp                                = (yy_hold_char);                                        \
    YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ;        \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                                                 \
  } while (0)

#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
  /* %if-c-only */
  /* %endif */

  /* %if-c++-only */
  std::istream *yy_input_file;
  /* %endif */

  char *yy_ch_buf;  /* input buffer */
  char *yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  yy_size_t yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW    0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SEAMSalloc(yy_size_t);
void *SEAMSrealloc(void *, yy_size_t);
void  SEAMSfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                                                         \
  {                                                                                                \
    if (!YY_CURRENT_BUFFER) {                                                                      \
      yyensure_buffer_stack();                                                                     \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);                              \
    }                                                                                              \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;                                  \
  }

#define yy_set_bol(at_bol)                                                                         \
  {                                                                                                \
    if (!YY_CURRENT_BUFFER) {                                                                      \
      yyensure_buffer_stack();                                                                     \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);                              \
    }                                                                                              \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                                                  \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION                                                                        \
  (yytext_ptr) = yy_bp;                                                                            \
  /* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */                         \
  yyleng         = (size_t)(yy_cp - yy_bp);                                                        \
  (yy_hold_char) = *yy_cp;                                                                         \
  *yy_cp         = '\0';                                                                           \
  /* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */                        \
  (yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES     99
#define YY_END_OF_BUFFER 100
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[641] = {
    0,  0,  0,   49, 49, 0,  0,  41, 41, 0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  100, 97, 97, 98, 95, 96, 96, 96, 97, 92, 49, 69, 84, 97, 66, 97, 97, 70, 71,
    62, 60, 72,  61, 48, 65, 47, 74, 73, 76, 51, 77, 75, 50, 50, 50, 85, 86, 67, 92, 97,
    89, 63, 97,  44, 44, 45, 41, 44, 41, 41, 41, 41, 44, 44, 3,  3,  4,  2,  3,  2,  2,
    2,  2,  3,   3,  97, 97, 35, 95, 96, 96, 96, 97, 92, 97, 97, 95, 97,

    97, 96, 96,  96, 97, 92, 97, 97, 19, 95, 96, 96, 96, 97, 92, 97, 97, 23, 95, 96, 96,
    96, 97, 92,  97, 97, 27, 95, 96, 96, 96, 97, 92, 0,  0,  96, 96, 96, 90, 91, 0,  0,
    0,  0,  0,   0,  0,  0,  0,  49, 0,  81, 0,  87, 82, 0,  88, 68, 54, 58, 52, 59, 53,
    48, 0,  64,  55, 48, 47, 0,  78, 80, 79, 50, 50, 50, 56, 0,  83, 0,  0,  0,  41, 41,
    41, 41, 41,  42, 43, 0,  0,  0,  2,  2,  2,  2,  2,  0,  0,  35,

    0,  0,  96,  96, 96, 90, 91, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  96,
    96, 96, 90,  91, 0,  0,  19, 0,  0,  96, 96, 96, 90, 91, 0,  0,  0,  0,  23, 0,  0,
    96, 96, 96,  90, 91, 0,  0,  0,  0,  27, 0,  0,  96, 96, 96, 90, 91, 0,  0,  0,  0,
    0,  96, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  57, 0,  48, 0,  47, 50, 50,
    41, 41, 0,   0,  0,  2,  2,  0,  96, 96, 0,  0,  0,  0,  0,  13,

    0,  0,  0,   0,  0,  0,  0,  96, 96, 0,  0,  96, 96, 0,  0,  0,  0,  96, 96, 0,  0,
    0,  0,  96,  96, 0,  0,  0,  0,  0,  0,  93, 94, 0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,   50, 50, 41, 41, 0,  0,  0,  37, 0,  0,  2,  2,  0,  93, 94, 0,  0,  0,
    0,  0,  0,   0,  15, 0,  0,  13, 0,  0,  14, 0,  93, 94, 0,  0,  93, 94, 0,  0,  0,
    0,  93, 94,  0,  0,  0,  0,  93, 94, 0,  0,  0,  0,  0,  0,  0,

    0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  33, 0,
    0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  6,   0,  0,  0,  0,  0,  0,  12, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  24, 0,
    0,  0,  0,   39, 0,  0,  0,  29, 0,  0,  0,  0,  0,  0,  0,  36,

    0,  0,  0,   35, 0,  0,  0,  0,  0,  0,  0,  0,  0,  19, 0,  0,  0,  17, 0,  0,  23,
    0,  0,  0,   21, 0,  27, 0,  0,  0,  0,  0,  0,  46, 0,  0,  30, 8,  0,  0,  0,  0,
    40, 0,  38,  0,  0,  31, 0,  32, 0,  0,  0,  0,  0,  0,  0,  19, 0,  0,  0,  23, 0,
    0,  27, 0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  34, 0,  15, 0,  0,  0,  0,  16,
    0,  0,  20,  0,  0,  0,  0,  7,  0,  0,  0,  25, 0,  0,  0,  0,

    15, 0,  0,   0,  0,  25, 0,  9,  0,  0,  0,  0,  0,  0,  0,  18, 0,  22, 0,  0,  0,
    0,  0,  28,  0,  0,  26, 0,  0,  0,  0,  0,  0,  5,  0,  0,  10, 1,  11, 0};

static yyconst flex_int32_t yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  5,  6,  1,  7,  8,  9,  10, 11, 12,
    13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 21, 22, 23, 24,
    25, 1,  26, 27, 28, 29, 30, 31, 29, 32, 33, 29, 29, 34, 35, 36, 37, 29, 38, 39, 29,
    40, 41, 42, 29, 43, 29, 29, 44, 45, 46, 47, 29, 1,  48, 49, 50, 51,

    52, 53, 29, 54, 55, 29, 29, 56, 29, 57, 58, 59, 38, 60, 61, 62, 63, 29, 64, 43, 29,
    29, 65, 66, 67, 68, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,

    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static yyconst flex_int32_t yy_meta[69] = {0, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                           1, 5, 6, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 1, 1, 1};

static yyconst flex_int16_t yy_base[687] = {
    0,    0,    0,    68,   0,    135,  136,  201,  0,    268,  269,  334,  0,    402,  0,
    470,  0,    538,  0,    606,  0,    674,  0,    2250, 2251, 741,  2251, 2251, 0,    2206,
    100,  77,   805,  745,  2251, 2225, 140,  2251, 2238, 2236, 2251, 2251, 132,  133,  2251,
    134,  129,  131,  134,  2251, 2251, 2222, 2221, 2220, 2251, 0,    2199, 111,  2251, 2251,
    2218, 128,  2174, 2251, 2251, 746,  2251, 749,  2251, 750,  2251, 753,  156,  270,  740,
    100,  273,  2251, 754,  2251, 755,  2251, 759,  157,  272,  742,  101,  140,  2236, 761,
    2251, 2235, 861,  2194, 121,  763,  275,  2224, 766,  2223, 267,

    268,  929,  2191, 128,  760,  269,  2230, 771,  2251, 2229, 997,  2188, 130,  777,  1063,
    2227, 783,  2251, 2226, 1119, 2185, 131,  785,  1185, 2224, 788,  2251, 2223, 1241, 2182,
    132,  1307, 1066, 767,  1309, 0,    142,  249,  2251, 2251, 794,  255,  143,  2166, 2186,
    2192, 2169, 131,  2167, 775,  258,  2251, 288,  2251, 2251, 2209, 2251, 2195, 2251, 2251,
    2251, 2251, 2251, 265,  310,  2251, 2251, 270,  765,  783,  2251, 2251, 2251, 0,    263,
    268,  2251, 133,  2251, 1310, 1313, 1314, 1317, 1318, 179,  796,  1185, 2251, 2251, 1321,
    275,  2164, 1320, 1324, 289,  1326, 1329, 2186, 2212, 2251,

    1325, 1347, 0,    734,  768,  2211, 2210, 1331, 790,  2200, 782,  1336, 1055, 1329, 1060,
    1059, 792,  1062, 1178, 1068, 0,    779,  800,  2199, 2198, 1179, 2206, 2251, 1333, 1383,
    0,    1043, 1044, 2205, 2204, 773,  1349, 1350, 2203, 2251, 1353, 1389, 0,    1050, 1053,
    2202, 2201, 805,  1355, 1364, 2200, 2251, 1391, 1422, 0,    1055, 1058, 2199, 2198, 1425,
    1376, 810,  1351, 1394, 1152, 1154, 2143, 2167, 2137, 2146, 2161, 128,  2137, 2164, 2154,
    2139, 2140, 2251, 2171, 2170, 2169, 2168, 1158, 1159, 1396, 1400, 2130, 2124, 1442, 1439,
    1443, 2145, 1160, 1161, 1360, 1404, 1467, 304,  1091, 2251,

    1445, 1092, 1090, 1184, 1190, 1194, 1198, 1164, 1167, 1426, 1319, 1169, 1172, 1407, 1373,
    1439, 1427, 1420, 1424, 1446, 1458, 1451, 1463, 1427, 1441, 1411, 1477, 1481, 1485, 1488,
    1489, 0,    0,    2132, 2145, 2129, 1461, 2139, 2127, 2127, 2118, 2148, 2148, 2126, 1462,
    0,    0,    817,  1493, 2112, 2120, 1496, 2251, 2119, 2119, 1502, 1505, 2142, 0,    0,
    1493, 1511, 1524, 2165, 1505, 1507, 1508, 2251, 1527, 1530, 2251, 1531, 1544, 2251, 1547,
    0,    0,    1503, 1519, 0,    0,    1526, 1533, 1534, 1545, 0,    0,    1546, 1548, 1562,
    1550, 0,    0,    1551, 1558, 1560, 1559, 1557, 1566, 2106,

    1553, 2099, 2112, 2124, 2110, 2110, 1568, 2129, 2134, 2096, 2094, 2105, 1558, 2103, 2103,
    2128, 1568, 1570, 2150, 2251, 1573, 1572, 1575, 1580, 1585, 1565, 1569, 1577, 1579, 1581,
    1598, 1626, 1600, 1604, 1605, 1609, 1638, 1613, 1616, 1628, 2149, 1630, 1633, 2114, 2251,
    2147, 2082, 2122, 1641, 2094, 1646, 2251, 2109, 2105, 2088, 2088, 1605, 2089, 1657, 2088,
    2100, 2136, 1641, 1661, 1648, 1663, 1635, 1650, 2135, 1651, 1652, 1674, 2134, 1666, 2133,
    1667, 1670, 1684, 2132, 2131, 1676, 2130, 2251, 1677, 1686, 1070, 2129, 2251, 2128, 2103,
    1688, 2251, 1692, 2062, 2095, 2065, 2064, 2122, 1703, 2251,

    1709, 2091, 2120, 2251, 1900, 1713, 1886, 1727, 1679, 1709, 1720, 1695, 1879, 2251, 1860,
    1701, 1859, 2251, 1706, 1858, 2251, 1856, 1716, 1855, 2251, 1854, 2251, 1853, 1722, 1723,
    1823, 1840, 1847, 2251, 1815, 1733, 2251, 2251, 1813, 1738, 1797, 1843, 2251, 1743, 2251,
    1810, 1840, 2251, 1839, 2251, 1746, 1838, 1724, 1743, 1749, 1736, 1837, 2251, 1836, 1748,
    1835, 2251, 1834, 1833, 2251, 1763, 1753, 1823, 1767, 1802, 1820, 1766, 1826, 1774, 1815,
    1822, 2251, 1759, 2251, 1760, 1766, 1755, 1820, 2251, 1756, 1819, 2251, 1777, 1818, 1770,
    1753, 2251, 1808, 1781, 1814, 2251, 1784, 1776, 1771, 1779,

    2251, 1786, 1809, 1808, 1807, 2251, 1793, 2251, 1772, 1772, 1788, 1804, 1773, 1790, 1784,
    2251, 1774, 2251, 1797, 1388, 1196, 1359, 1365, 2251, 1208, 1235, 2251, 1197, 1213, 1157,
    1088, 920,  247,  2251, 235,  131,  2251, 2251, 2251, 2251, 1860, 1866, 1872, 1874, 1879,
    1881, 1886, 1888, 1894, 1900, 1906, 1912, 1918, 1924, 1930, 1936, 1942, 1948, 1954, 1960,
    1966, 1972, 1978, 1984, 1990, 1996, 2002, 2008, 2014, 2020, 2026, 2032, 2038, 2044, 2050,
    2056, 2062, 2068, 2074, 2080, 2086, 2092, 2098, 2104, 2110, 2116};

static yyconst flex_int16_t yy_def[687] = {
    0,   640, 1,   640, 3,   1,   1,   640, 7,   1,   1,   640, 11,  640, 13,  640, 15,  640,
    17,  640, 19,  640, 21,  640, 640, 640, 640, 640, 641, 641, 641, 640, 640, 640, 640, 640,
    642, 640, 640, 643, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 644, 644, 644, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 645, 640, 645,
    646, 646, 646, 640, 640, 640, 640, 640, 647, 640, 647, 648, 648, 648, 640, 640, 649, 649,
    640, 649, 640, 92,  92,  649, 649, 650, 650, 650, 650,

    650, 640, 102, 102, 650, 650, 651, 651, 640, 651, 640, 111, 111, 651, 651, 652, 652, 640,
    652, 640, 120, 120, 652, 652, 653, 653, 640, 653, 640, 129, 129, 653, 653, 640, 640, 641,
    641, 641, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 642, 640,
    640, 643, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 644, 644, 644, 640, 640, 640, 640, 640, 640, 645, 645, 646, 646, 646, 640, 640, 640,
    640, 640, 647, 647, 648, 648, 648, 640, 649, 640,

    649, 649, 92,  92,  92,  649, 649, 649, 649, 650, 650, 650, 650, 654, 650, 650, 650, 650,
    650, 650, 102, 102, 102, 650, 650, 650, 651, 640, 651, 651, 111, 111, 111, 651, 651, 651,
    651, 651, 652, 640, 652, 652, 120, 120, 120, 652, 652, 652, 652, 652, 653, 640, 653, 653,
    129, 129, 129, 653, 653, 653, 653, 653, 653, 653, 641, 641, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 644, 644, 646, 646, 640, 640, 640, 648,
    648, 640, 92,  92,  649, 649, 649, 655, 654, 640,

    654, 656, 650, 650, 657, 650, 650, 102, 102, 650, 650, 111, 111, 651, 651, 651, 651, 120,
    120, 652, 652, 652, 652, 129, 129, 653, 653, 653, 653, 653, 653, 641, 641, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 640, 640, 644, 644, 646, 646, 640, 640, 640, 640, 640,
    640, 648, 648, 640, 92,  92,  649, 649, 649, 658, 649, 649, 655, 640, 655, 656, 640, 656,
    657, 640, 657, 102, 102, 650, 650, 111, 111, 651, 651, 651, 651, 120, 120, 652, 652, 652,
    652, 129, 129, 653, 653, 653, 653, 653, 653, 640,

    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 649, 649,
    658, 640, 649, 649, 655, 656, 657, 650, 650, 651, 651, 651, 651, 651, 652, 652, 652, 652,
    652, 653, 653, 653, 659, 653, 653, 640, 640, 660, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 661, 649, 649, 649, 662, 650, 651, 663, 651, 651, 651,
    664, 652, 665, 652, 652, 652, 666, 667, 653, 659, 640, 653, 653, 640, 660, 640, 668, 640,
    640, 640, 640, 640, 640, 640, 640, 669, 640, 640,

    640, 640, 661, 640, 670, 649, 671, 649, 662, 662, 672, 651, 663, 640, 673, 651, 664, 640,
    652, 665, 640, 674, 652, 666, 640, 667, 640, 675, 653, 653, 640, 640, 668, 640, 640, 640,
    640, 640, 640, 640, 640, 669, 640, 640, 640, 640, 670, 640, 671, 640, 649, 676, 677, 672,
    672, 651, 673, 640, 678, 652, 674, 640, 679, 675, 640, 653, 653, 640, 640, 640, 640, 640,
    680, 640, 640, 676, 640, 677, 640, 677, 681, 651, 678, 640, 652, 679, 640, 653, 682, 653,
    640, 640, 640, 640, 680, 640, 640, 640, 677, 681,

    640, 681, 683, 684, 682, 640, 653, 640, 640, 640, 640, 685, 640, 681, 683, 640, 684, 640,
    653, 686, 640, 640, 685, 640, 640, 686, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 0,   640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640};

static yyconst flex_int16_t yy_nxt[2320] = {
    0,   24,  25,  26,  25,  24,  24,  27,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,
    24,  24,  24,  24,  24,  24,  24,  28,  28,  28,  28,  29,  28,  28,  28,  28,  28,  28,  28,
    30,  28,  28,  28,  28,  28,  24,  31,  24,  24,  28,  28,  28,  28,  29,  28,  28,  28,  28,
    28,  28,  28,  28,  28,  28,  28,  28,  32,  24,  24,  24,  24,  33,  34,  33,  35,  36,  27,
    37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
    55,  55,  55,  56,  55,  55,

    55,  55,  55,  55,  55,  57,  55,  55,  55,  55,  55,  58,  31,  59,  60,  55,  55,  55,  55,
    56,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  61,  62,  63,  64,  65,  65,
    65,  65,  138, 139, 154, 140, 158, 154, 160, 164, 166, 162, 168, 176, 169, 167, 159, 161, 163,
    178, 165, 184, 194, 205, 138, 170, 188, 139, 189, 140, 223, 178, 233, 245, 257, 176, 265, 136,
    136, 271, 339, 178, 165, 198, 184, 205, 340, 170, 269, 277, 269, 270, 223, 178, 233, 245, 257,
    272, 265, 639, 136, 61,

    61,  66,  67,  68,  69,  66,  66,  70,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
    71,  66,  66,  66,  66,  66,  66,  72,  72,  72,  72,  73,  72,  72,  72,  72,  72,  72,  72,
    74,  72,  72,  72,  72,  72,  66,  75,  66,  66,  72,  72,  72,  72,  73,  72,  72,  72,  72,
    72,  72,  72,  72,  72,  72,  72,  72,  76,  66,  66,  66,  65,  65,  65,  65,  184, 190, 194,
    190, 200, 214, 217, 211, 266, 268, 164, 218, 215, 219, 178, 164, 136, 154, 136, 194, 154, 165,
    283, 216, 220, 226, 165,

    284, 638, 191, 266, 208, 192, 368, 209, 136, 178, 269, 270, 186, 637, 196, 369, 165, 283, 216,
    220, 226, 165, 284, 279, 191, 279, 208, 192, 280, 209, 288, 270, 61,  61,  77,  78,  79,  80,
    77,  77,  81,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  82,  77,  77,  77,  77,
    77,  77,  83,  83,  83,  83,  84,  83,  83,  83,  83,  83,  83,  83,  85,  83,  83,  83,  83,
    83,  77,  86,  77,  77,  83,  83,  83,  83,  84,  83,  83,  83,  83,  83,  83,  83,  83,  83,
    83,  83,  83,  87,  77,

    77,  77,  88,  89,  90,  89,  88,  88,  91,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
    88,  88,  88,  88,  88,  88,  88,  88,  92,  92,  92,  92,  93,  92,  92,  92,  92,  92,  92,
    92,  94,  92,  92,  92,  92,  92,  88,  95,  88,  88,  92,  92,  92,  92,  93,  92,  92,  92,
    92,  92,  92,  92,  92,  92,  92,  92,  92,  96,  88,  88,  88,  97,  98,  26,  98,  97,  97,
    99,  97,  97,  97,  97,  97,  97,  97,  97,  97,  100, 97,  101, 97,  97,  97,  97,  97,  97,
    102, 102, 102, 102, 103,

    102, 102, 102, 102, 102, 102, 102, 104, 102, 102, 102, 102, 102, 97,  105, 97,  97,  102, 102,
    102, 102, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 106, 97,  97,  97,
    107, 108, 109, 108, 107, 107, 110, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
    107, 107, 107, 107, 107, 107, 111, 111, 111, 111, 112, 111, 111, 111, 111, 111, 111, 111, 113,
    111, 111, 111, 111, 111, 107, 114, 107, 107, 111, 111, 111, 111, 112, 111, 111, 111, 111, 111,
    111, 111, 111, 111, 111,

    111, 111, 115, 107, 107, 107, 116, 117, 118, 117, 116, 116, 119, 116, 116, 116, 116, 116, 116,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 121, 120, 120,
    120, 120, 120, 120, 120, 122, 120, 120, 120, 120, 120, 116, 123, 116, 116, 120, 120, 120, 120,
    121, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 124, 116, 116, 116, 125, 126,
    127, 126, 125, 125, 128, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
    125, 125, 125, 125, 129,

    129, 129, 129, 130, 129, 129, 129, 129, 129, 129, 129, 131, 129, 129, 129, 129, 129, 125, 132,
    125, 125, 129, 129, 129, 129, 130, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
    133, 125, 125, 125, 134, 184, 134, 194, 150, 180, 150, 180, 181, 181, 181, 183, 640, 180, 180,
    180, 193, 136, 640, 136, 201, 200, 201, 200, 293, 212, 134, 212, 134, 211, 229, 228, 229, 228,
    150, 211, 150, 228, 187, 168, 197, 169, 241, 240, 241, 240, 293, 253, 252, 253, 200, 211, 170,
    141, 281, 141, 281, 184,

    294, 282, 187, 211, 197, 135, 141, 240, 141, 151, 151, 308, 252, 182, 182, 136, 170, 640, 151,
    151, 184, 314, 294, 640, 224, 202, 225, 206, 285, 207, 213, 135, 309, 308, 142, 230, 136, 143,
    144, 151, 145, 234, 297, 235, 147, 267, 146, 242, 298, 246, 285, 247, 254, 320, 309, 147, 148,
    329, 305, 149, 144, 199, 199, 200, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
    199, 199, 199, 203, 203, 199, 199, 199, 199, 199, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203,

    203, 203, 203, 203, 199, 199, 199, 199, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 199, 199, 199, 199, 210, 210, 636, 210, 210, 210, 210, 210, 210,
    210, 210, 211, 210, 210, 210, 210, 210, 210, 221, 221, 210, 210, 210, 210, 210, 221, 221, 221,
    221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 210, 210, 210, 210,
    221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 210, 210,
    210, 210, 227, 227, 228,

    227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 231, 231, 227, 227,
    227, 227, 227, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
    231, 231, 227, 227, 227, 227, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
    231, 231, 231, 231, 227, 227, 227, 227, 228, 211, 260, 252, 260, 211, 214, 303, 214, 303, 312,
    313, 304, 215, 211, 215, 306, 318, 306, 226, 319, 307, 324, 236, 216, 325, 216, 237, 300, 371,
    261, 238, 312, 313, 635,

    531, 211, 301, 372, 318, 532, 226, 319, 304, 324, 236, 216, 325, 216, 237, 262, 263, 264, 238,
    239, 239, 240, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 243,
    243, 239, 239, 239, 239, 239, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
    243, 243, 243, 243, 243, 239, 239, 239, 239, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
    243, 243, 243, 243, 243, 243, 243, 239, 239, 239, 239, 240, 184, 217, 211, 332, 374, 333, 218,
    214, 219, 346, 347, 359,

    360, 375, 304, 376, 136, 211, 377, 220, 380, 217, 248, 381, 307, 332, 249, 333, 307, 286, 250,
    346, 347, 359, 360, 634, 633, 376, 628, 632, 377, 220, 380, 629, 248, 381, 310, 311, 249, 627,
    631, 286, 250, 251, 251, 252, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
    251, 251, 255, 255, 251, 251, 251, 251, 251, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 251, 251, 251, 251, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255,

    255, 255, 255, 255, 255, 251, 251, 251, 251, 252, 141, 180, 141, 180, 181, 190, 181, 190, 181,
    640, 183, 180, 190, 193, 190, 640, 201, 200, 201, 194, 211, 300, 194, 200, 229, 228, 229, 212,
    142, 212, 301, 143, 144, 191, 145, 136, 192, 211, 136, 200, 287, 228, 228, 252, 241, 240, 241,
    240, 290, 147, 148, 291, 200, 149, 144, 191, 240, 624, 192, 379, 630, 258, 287, 259, 151, 228,
    208, 182, 252, 209, 290, 182, 640, 291, 151, 228, 295, 296, 640, 202, 627, 240, 253, 252, 253,
    302, 252, 230, 208, 184,

    213, 209, 330, 184, 315, 316, 200, 317, 236, 228, 321, 322, 237, 252, 248, 136, 238, 242, 249,
    136, 361, 323, 250, 260, 252, 260, 260, 252, 260, 228, 236, 327, 328, 383, 237, 348, 248, 211,
    238, 349, 249, 228, 194, 352, 250, 352, 194, 300, 240, 327, 331, 261, 353, 240, 362, 254, 301,
    348, 136, 386, 240, 349, 136, 387, 382, 240, 392, 394, 363, 200, 363, 262, 263, 264, 262, 263,
    326, 364, 356, 252, 393, 386, 357, 252, 385, 387, 378, 252, 392, 384, 252, 252, 354, 403, 403,
    200, 184, 352, 355, 352,

    356, 390, 393, 388, 357, 194, 353, 200, 194, 200, 368, 302, 136, 200, 211, 403, 403, 365, 389,
    369, 391, 136, 411, 366, 136, 363, 200, 363, 228, 368, 211, 396, 371, 371, 364, 228, 228, 395,
    369, 399, 398, 372, 372, 418, 417, 397, 374, 228, 240, 374, 240, 427, 240, 252, 426, 375, 421,
    422, 375, 252, 252, 252, 252, 444, 240, 418, 430, 431, 252, 451, 200, 451, 200, 427, 200, 200,
    211, 368, 452, 228, 211, 228, 371, 228, 429, 428, 369, 374, 430, 431, 458, 372, 440, 423, 435,
    436, 375, 424, 440, 434,

    228, 438, 240, 432, 442, 433, 240, 240, 437, 439, 441, 240, 458, 425, 440, 252, 435, 436, 252,
    445, 440, 467, 463, 465, 446, 464, 443, 472, 228, 472, 252, 466, 252, 470, 462, 252, 473, 458,
    468, 478, 240, 478, 491, 200, 491, 469, 211, 451, 479, 451, 200, 492, 228, 228, 228, 471, 452,
    476, 499, 458, 499, 474, 506, 200, 506, 488, 477, 500, 240, 240, 475, 507, 240, 443, 510, 472,
    228, 472, 252, 252, 481, 488, 480, 512, 473, 478, 240, 478, 252, 491, 510, 491, 484, 536, 479,
    536, 485, 228, 492, 519,

    508, 511, 537, 228, 499, 512, 499, 505, 240, 516, 544, 488, 544, 500, 506, 200, 506, 515, 240,
    545, 510, 519, 534, 507, 252, 252, 579, 523, 551, 200, 551, 555, 529, 522, 536, 580, 536, 552,
    228, 572, 530, 572, 528, 537, 544, 534, 544, 551, 200, 551, 240, 534, 556, 545, 555, 252, 552,
    228, 240, 559, 555, 579, 579, 560, 588, 252, 588, 572, 601, 572, 580, 580, 252, 579, 563, 553,
    618, 602, 588, 252, 588, 601, 580, 566, 567, 611, 616, 611, 601, 611, 602, 611, 601, 582, 619,
    252, 619, 602, 619, 252,

    619, 602, 590, 625, 573, 585, 624, 622, 621, 606, 618, 616, 613, 603, 604, 581, 596, 610, 609,
    608, 606, 587, 584, 607, 577, 598, 599, 597, 596, 589, 594, 593, 573, 592, 591, 565, 587, 562,
    584, 558, 577, 550, 548, 589, 575, 543, 574, 571, 570, 534, 612, 569, 614, 568, 612, 565, 527,
    525, 562, 620, 521, 518, 558, 620, 136, 136, 153, 153, 153, 153, 153, 153, 156, 156, 156, 156,
    156, 156, 174, 174, 184, 514, 184, 184, 185, 185, 185, 194, 550, 194, 194, 195, 195, 195, 199,
    199, 199, 199, 199, 199,

    210, 210, 548, 210, 210, 210, 227, 227, 227, 227, 227, 227, 239, 239, 239, 239, 239, 239, 251,
    251, 251, 251, 251, 251, 299, 299, 299, 299, 299, 299, 367, 367, 367, 367, 367, 367, 370, 370,
    370, 370, 370, 370, 373, 373, 373, 373, 373, 373, 419, 419, 419, 419, 419, 419, 482, 482, 482,
    482, 482, 482, 487, 487, 487, 487, 487, 487, 503, 503, 503, 503, 503, 503, 509, 509, 509, 509,
    509, 509, 513, 513, 513, 513, 513, 513, 517, 517, 517, 517, 517, 517, 520, 520, 520, 520, 520,
    520, 524, 524, 524, 524,

    524, 524, 526, 526, 526, 526, 526, 526, 533, 533, 533, 533, 533, 533, 542, 542, 542, 542, 542,
    542, 547, 547, 547, 547, 547, 547, 549, 549, 549, 549, 549, 549, 554, 554, 554, 554, 554, 554,
    557, 557, 557, 557, 557, 557, 561, 561, 561, 561, 561, 561, 564, 564, 564, 564, 564, 564, 576,
    576, 576, 576, 576, 576, 578, 578, 578, 578, 578, 578, 583, 583, 583, 583, 583, 583, 586, 586,
    586, 586, 586, 586, 595, 595, 595, 595, 595, 595, 600, 600, 600, 600, 600, 600, 605, 605, 605,
    605, 605, 605, 615, 615,

    615, 615, 615, 615, 617, 617, 617, 617, 617, 617, 623, 623, 623, 623, 623, 623, 626, 626, 626,
    626, 626, 626, 504, 546, 543, 541, 540, 539, 538, 535, 534, 488, 483, 527, 525, 521, 518, 514,
    504, 502, 501, 498, 497, 496, 495, 494, 493, 490, 489, 488, 486, 483, 420, 461, 460, 459, 457,
    456, 455, 454, 453, 450, 449, 448, 447, 446, 411, 420, 416, 415, 414, 413, 412, 410, 409, 408,
    407, 406, 405, 404, 402, 401, 400, 358, 351, 350, 282, 282, 280, 280, 345, 344, 343, 342, 341,
    338, 337, 336, 335, 334,

    252, 252, 252, 240, 240, 240, 228, 228, 228, 211, 211, 211, 200, 200, 200, 292, 289, 278, 157,
    272, 276, 275, 274, 273, 256, 252, 252, 244, 240, 240, 232, 228, 228, 222, 211, 211, 204, 200,
    200, 179, 177, 175, 173, 172, 171, 157, 155, 152, 137, 640, 23,  640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640,

    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640};

static yyconst flex_int16_t yy_chk[2320] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,

    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   5,   6,
    5,   6,   30,  31,  36,  31,  42,  36,  43,  46,  47,  45,  48,  57,  48,  47,  42,  43,  45,
    61,  46,  72,  83,  94,  30,  48,  75,  86,  75,  86,  104, 87,  113, 122, 131, 57,  137, 72,
    83,  143, 272, 61,  46,  87,  185, 94,  272, 48,  148, 148, 178, 178, 104, 87,  113, 122, 131,
    143, 137, 636, 185, 5,

    6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   9,   10,  9,   10,  73,  76,  84,
    76,  96,  100, 101, 106, 138, 142, 164, 101, 100, 101, 151, 168, 73,  153, 84,  195, 153, 164,
    175, 100, 101, 106, 168,

    176, 635, 76,  138, 96,  76,  298, 96,  195, 151, 142, 142, 73,  633, 84,  298, 164, 175, 100,
    101, 106, 168, 176, 165, 76,  165, 96,  76,  165, 96,  191, 191, 9,   10,  11,  11,  11,  11,
    11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
    11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
    11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
    11,  11,  11,  11,  11,

    11,  11,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
    13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
    13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
    13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,

    15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,
    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,
    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,
    17,  17,  17,  17,  17,

    17,  17,  17,  17,  17,  17,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  21,  21,
    21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
    21,  21,  21,  21,  21,

    21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
    21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
    21,  21,  21,  21,  25,  74,  25,  85,  33,  65,  33,  65,  67,  69,  67,  69,  71,  78,  80,
    78,  80,  74,  82,  85,  89,  89,  89,  95,  204, 98,  134, 98,  134, 105, 108, 108, 108, 236,
    150, 98,  150, 114, 74,  169, 85,  169, 117, 117, 117, 123, 204, 126, 126, 126, 209, 211, 169,
    141, 170, 141, 170, 186,

    205, 170, 74,  217, 85,  25,  32,  248, 32,  33,  65,  222, 262, 67,  69,  186, 169, 71,  78,
    80,  348, 236, 205, 82,  105, 89,  105, 95,  186, 95,  98,  134, 223, 222, 32,  108, 348, 32,
    32,  150, 32,  114, 209, 114, 141, 141, 32,  117, 211, 123, 186, 123, 126, 248, 223, 32,  32,
    262, 217, 32,  32,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,
    92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,
    92,  92,  92,  92,  92,

    92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,
    92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  102, 102, 632, 102, 102, 102, 102, 102, 102,
    102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
    102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
    102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
    102, 102, 111, 111, 111,

    111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
    111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
    111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
    111, 111, 111, 111, 111, 111, 111, 111, 115, 213, 133, 133, 133, 216, 215, 216, 218, 216, 232,
    233, 216, 215, 220, 218, 220, 244, 220, 213, 245, 220, 256, 115, 215, 257, 218, 115, 299, 302,
    133, 115, 232, 233, 631,

    486, 303, 299, 302, 244, 486, 213, 245, 303, 256, 115, 215, 257, 218, 115, 133, 133, 133, 115,
    120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
    120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
    120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
    120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 124, 187, 219, 226, 265, 305, 266, 219,
    304, 219, 283, 284, 293,

    294, 305, 304, 308, 187, 306, 309, 219, 312, 307, 124, 313, 306, 265, 124, 266, 307, 187, 124,
    283, 284, 293, 294, 630, 629, 308, 621, 628, 309, 219, 312, 621, 124, 313, 226, 226, 124, 626,
    625, 187, 124, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
    129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
    129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
    129, 129, 129, 129, 129,

    129, 129, 129, 129, 129, 129, 129, 129, 129, 132, 135, 180, 135, 180, 181, 182, 181, 182, 183,
    184, 183, 193, 190, 193, 190, 194, 201, 201, 201, 196, 311, 214, 197, 208, 229, 229, 229, 212,
    135, 212, 214, 135, 135, 182, 135, 196, 182, 212, 197, 202, 190, 237, 238, 263, 241, 241, 241,
    249, 196, 135, 135, 197, 295, 135, 135, 182, 250, 623, 182, 311, 622, 132, 190, 132, 180, 315,
    202, 181, 261, 202, 196, 183, 184, 197, 193, 230, 208, 208, 194, 201, 620, 242, 253, 253, 253,
    214, 264, 229, 202, 285,

    212, 202, 263, 286, 237, 237, 296, 238, 230, 314, 249, 249, 230, 326, 242, 285, 230, 241, 242,
    286, 295, 250, 242, 254, 254, 254, 260, 260, 260, 317, 230, 261, 261, 315, 230, 285, 242, 310,
    230, 286, 242, 316, 290, 289, 242, 289, 291, 301, 320, 264, 264, 254, 289, 322, 296, 253, 301,
    285, 290, 318, 321, 286, 291, 319, 314, 323, 324, 326, 297, 297, 297, 254, 254, 254, 260, 260,
    260, 297, 290, 327, 325, 318, 291, 328, 317, 319, 310, 329, 324, 316, 330, 331, 289, 337, 345,
    361, 349, 352, 289, 352,

    290, 322, 325, 320, 291, 356, 352, 365, 357, 366, 367, 301, 349, 362, 378, 337, 345, 297, 321,
    367, 323, 356, 345, 297, 357, 363, 363, 363, 382, 369, 379, 328, 370, 372, 363, 383, 384, 327,
    369, 331, 330, 370, 372, 362, 361, 329, 373, 385, 388, 375, 389, 379, 391, 394, 378, 373, 365,
    366, 375, 398, 395, 397, 396, 401, 390, 362, 384, 384, 399, 407, 417, 407, 418, 379, 422, 421,
    426, 423, 407, 428, 427, 429, 424, 430, 383, 382, 423, 425, 384, 384, 413, 424, 396, 369, 390,
    390, 425, 372, 399, 389,

    431, 394, 433, 385, 398, 388, 434, 435, 391, 395, 397, 436, 413, 375, 396, 438, 390, 390, 439,
    401, 399, 427, 418, 422, 413, 421, 399, 432, 432, 432, 440, 426, 442, 430, 417, 443, 432, 457,
    428, 437, 437, 437, 449, 463, 449, 429, 467, 451, 437, 451, 465, 449, 468, 470, 471, 431, 451,
    435, 459, 457, 459, 433, 464, 464, 464, 466, 436, 459, 474, 476, 434, 464, 477, 438, 466, 472,
    472, 472, 481, 484, 440, 509, 439, 468, 472, 478, 478, 478, 485, 491, 509, 491, 442, 493, 478,
    493, 443, 512, 491, 474,

    465, 467, 493, 516, 499, 468, 499, 463, 519, 471, 501, 510, 501, 499, 506, 506, 506, 470, 523,
    501, 510, 474, 511, 506, 529, 530, 553, 477, 508, 508, 508, 511, 484, 476, 536, 553, 536, 508,
    556, 540, 485, 540, 481, 536, 544, 554, 544, 551, 551, 551, 560, 555, 512, 544, 554, 567, 551,
    582, 585, 516, 555, 578, 580, 519, 566, 566, 566, 572, 581, 572, 578, 580, 590, 599, 523, 510,
    617, 581, 588, 588, 588, 600, 599, 529, 530, 597, 615, 597, 602, 611, 600, 611, 614, 556, 607,
    607, 607, 602, 619, 619,

    619, 614, 567, 613, 540, 560, 612, 610, 609, 605, 604, 603, 598, 582, 585, 555, 595, 594, 593,
    591, 589, 586, 583, 590, 576, 575, 580, 574, 573, 566, 571, 570, 572, 569, 568, 564, 563, 561,
    559, 557, 552, 549, 547, 588, 546, 542, 541, 539, 535, 533, 597, 532, 602, 531, 611, 528, 526,
    524, 522, 607, 520, 517, 515, 619, 641, 641, 642, 642, 642, 642, 642, 642, 643, 643, 643, 643,
    643, 643, 644, 644, 645, 513, 645, 645, 646, 646, 646, 647, 507, 647, 647, 648, 648, 648, 649,
    649, 649, 649, 649, 649,

    650, 650, 505, 650, 650, 650, 651, 651, 651, 651, 651, 651, 652, 652, 652, 652, 652, 652, 653,
    653, 653, 653, 653, 653, 654, 654, 654, 654, 654, 654, 655, 655, 655, 655, 655, 655, 656, 656,
    656, 656, 656, 656, 657, 657, 657, 657, 657, 657, 658, 658, 658, 658, 658, 658, 659, 659, 659,
    659, 659, 659, 660, 660, 660, 660, 660, 660, 661, 661, 661, 661, 661, 661, 662, 662, 662, 662,
    662, 662, 663, 663, 663, 663, 663, 663, 664, 664, 664, 664, 664, 664, 665, 665, 665, 665, 665,
    665, 666, 666, 666, 666,

    666, 666, 667, 667, 667, 667, 667, 667, 668, 668, 668, 668, 668, 668, 669, 669, 669, 669, 669,
    669, 670, 670, 670, 670, 670, 670, 671, 671, 671, 671, 671, 671, 672, 672, 672, 672, 672, 672,
    673, 673, 673, 673, 673, 673, 674, 674, 674, 674, 674, 674, 675, 675, 675, 675, 675, 675, 676,
    676, 676, 676, 676, 676, 677, 677, 677, 677, 677, 677, 678, 678, 678, 678, 678, 678, 679, 679,
    679, 679, 679, 679, 680, 680, 680, 680, 680, 680, 681, 681, 681, 681, 681, 681, 682, 682, 682,
    682, 682, 682, 683, 683,

    683, 683, 683, 683, 684, 684, 684, 684, 684, 684, 685, 685, 685, 685, 685, 685, 686, 686, 686,
    686, 686, 686, 503, 502, 498, 497, 496, 495, 494, 490, 489, 487, 482, 480, 479, 475, 473, 469,
    462, 461, 460, 458, 456, 455, 454, 453, 450, 448, 447, 446, 444, 441, 419, 416, 415, 414, 412,
    411, 410, 409, 408, 406, 405, 404, 403, 402, 400, 364, 358, 355, 354, 351, 350, 344, 343, 342,
    341, 340, 339, 338, 336, 335, 334, 292, 288, 287, 282, 281, 280, 279, 277, 276, 275, 274, 273,
    271, 270, 269, 268, 267,

    259, 258, 251, 247, 246, 239, 235, 234, 227, 225, 224, 210, 207, 206, 199, 198, 192, 158, 156,
    149, 147, 146, 145, 144, 130, 128, 125, 121, 119, 116, 112, 110, 107, 103, 99,  97,  93,  91,
    88,  62,  60,  56,  53,  52,  51,  39,  38,  35,  29,  23,  640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640,
    640, 640, 640, 640, 640,

    640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640};

static yyconst flex_int16_t yy_rule_linenum[99] = {
    0,   105, 106, 107, 108, 112, 113, 114, 115, 116, 118, 119, 121, 130, 131, 159, 195,
    219, 225, 246, 253, 264, 269, 283, 288, 295, 318, 329, 331, 345, 358, 383, 389, 394,
    399, 404, 414, 422, 430, 439, 467, 488, 489, 490, 491, 493, 498, 523, 524, 527, 529,
    537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
    554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
    571, 572, 573, 579, 585, 597, 599, 601, 617, 618, 628, 631, 632, 634

};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT      reject_used_but_not_detected
#define yymore()    yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* -*- Mode: c++ -*- */
/*
 * Copyright(C) 1999-2022 National Technology & Engineering Solutions
 * of Sandia, LLC (NTESS).  Under the terms of Contract DE-NA0003525 with
 * NTESS, the U.S. Government retains certain rights in this software.
 *
 * See packages/seacas/LICENSE for details
 */

#include <fcntl.h>
#include <fstream>
#include <iostream>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "apr_getline_int.h"
#include "apr_scanner.h"
#include "apr_util.h"
#include "aprepro.h"

#define YY_NO_UNISTD_H
/* import the parser's token type into a local typedef */
typedef SEAMS::Parser::token      token;
typedef SEAMS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

#define show(x) *(aprepro->infoStream) << "<" << x << ">" << std::flush;
namespace SEAMS {
  extern bool echo;
  void        yyerror(const char *s);
} // namespace SEAMS

int file_must_exist = 0; /* Global used by include/conditional include */

/* Global variables used by the looping mechanism */
SEAMS::file_rec *outer_file = nullptr;
int              loop_lvl   = 0;
std::fstream    *tmp_file;
const char      *temp_f;

#if defined           __NVCC__
#pragma diag_suppress code_is_unreachable
#endif

#define MAX_IF_NESTING 1024

int    if_state[MAX_IF_NESTING]    = {0};     // INITIAL
int    if_case_run[MAX_IF_NESTING] = {false}; /* Has any if or elseif condition executed */
int    if_lvl                      = 0;
int    if_skip_level               = 0;
bool   suppress_nl                 = false;
bool   switch_active               = false; // Are we in a switch
bool   switch_case_run             = false; // has there been a case which matched condition run?
bool   switch_skip_to_endcase      = false;
double switch_condition            = 0.0; // Value specified in "switch(condition)"

// For substitution history
size_t      curr_index = 0;
std::string history_string;
size_t      hist_start = 0;

#define YY_USER_ACTION curr_index += yyleng;

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SEAMSFlexLexer" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* enables the use of start condition stacks */

#define INITIAL       0
#define PARSING       1
#define GET_FILENAME  2
#define IF_SKIP       3
#define GET_VAR       4
#define VERBATIM      5
#define IF_WHILE_SKIP 6
#define GET_LOOP_VAR  7
#define LOOP          8
#define LOOP_SKIP     9
#define END_CASE_SKIP 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput(yytext, yyleng)
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                                            \
  /* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */          \
                                                                                                   \
  /* %if-c++-only C++ definition \ */                                                              \
  if ((result = LexerInput((char *)buf, max_size)) < 0)                                            \
    YY_FATAL_ERROR("input in flex scanner failed");
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError(msg)
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
  register yy_state_type yy_current_state;
  register char         *yy_cp, *yy_bp;
  register int           yy_act;

  if (!(yy_init)) {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start))
      (yy_start) = 1; /* first start state */

    if (!yyin)
      /* %if-c-only */
      /* %endif */
      /* %if-c++-only */
      yyin = &std::cin;
    /* %endif */

    if (!yyout)
      /* %if-c-only */
      /* %endif */
      /* %if-c++-only */
      yyout = &std::cout;
    /* %endif */

    if (!YY_CURRENT_BUFFER) {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
    }

    yy_load_buffer_state();
  }

  {
    /* %% [7.0] user's declarations go here */

    while (1) /* loops until end-of-file is reached */
    {
      /* %% [8.0] yymore()-related code goes here */
      yy_cp = (yy_c_buf_p);

      /* Support of yytext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      /* %% [9.0] code to set up and find next match goes here */
      yy_current_state = (yy_start);
    yy_match:
      do {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        if (yy_accept[yy_current_state]) {
          (yy_last_accepting_state) = yy_current_state;
          (yy_last_accepting_cpos)  = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = (int)yy_def[yy_current_state];
          if (yy_current_state >= 641)
            yy_c = yy_meta[(unsigned int)yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
        ++yy_cp;
      } while (yy_base[yy_current_state] != 2251);

    yy_find_action:
      /* %% [10.0] code to find the action number goes here */
      yy_act = yy_accept[yy_current_state];
      if (yy_act == 0) { /* have to back up */
        yy_cp            = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        yy_act           = yy_accept[yy_current_state];
      }

      YY_DO_BEFORE_ACTION;

      /* %% [11.0] code for yylineno update goes here */

    do_action: /* This label is used only to access EOF actions. */

      /* %% [12.0] debug code goes here */
      if (yy_flex_debug) {
        if (yy_act == 0)
          std::cerr << "--scanner backing up\n";
        else if (yy_act < 99)
          std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] << "(\"" << yytext
                    << "\")\n";
        else if (yy_act == 99)
          std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
        else if (yy_act == 100)
          std::cerr << "--(end of buffer or a NUL)\n";
        else
          std::cerr << "--EOF (start condition " << YY_START << ")\n";
      }

      switch (yy_act) { /* beginning of action switch */
                        /* %% [13.0] actions go here */
      case 0:           /* must back up */
        /* undo the effects of YY_DO_BEFORE_ACTION */
        *yy_cp           = (yy_hold_char);
        yy_cp            = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        goto yy_find_action;

      case 1:
        YY_RULE_SETUP { BEGIN(INITIAL); }
        YY_BREAK
      case 2:
      case 3:
        YY_RULE_SETUP
        {
          if (echo)
            ECHO;
        }
        YY_BREAK
      case 4:
        /* rule 4 can match eol */
        YY_RULE_SETUP
        {
          if (echo)
            ECHO;
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK

      case 5:
        YY_RULE_SETUP { BEGIN(VERBATIM); }
        YY_BREAK
      case 6:
      case 7:
        YY_RULE_SETUP { echo = true; }
        YY_BREAK
      case 8:
      case 9:
        YY_RULE_SETUP { echo = false; }
        YY_BREAK
      case 10:
        YY_RULE_SETUP { aprepro.stateImmutable = true; }
        YY_BREAK
      case 11:
        YY_RULE_SETUP { aprepro.stateImmutable = aprepro.ap_options.immutable; }
        YY_BREAK
      case 12:
        YY_RULE_SETUP
        {
          BEGIN(GET_LOOP_VAR);
          if (aprepro.ap_options.debugging)
            std::cerr << "DEBUG LOOP - Found loop begin test " << yytext << " in file "
                      << aprepro.ap_file_list.top().name << " at line "
                      << aprepro.ap_file_list.top().lineno << "\n";
        }
        YY_BREAK

      case 13:
      /* rule 13 can match eol */
      case 14:
        /* rule 14 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          /* Loop control defined by integer */
          char *pt = strchr(yytext, ')');
          *pt      = '\0';
          sscanf(yytext, "%lf", &yylval->val);

          if (yylval->val <= 0) {
            BEGIN(LOOP_SKIP);
          }
          else { /* Value defined and != 0. */
            temp_f = get_temp_filename();
            SEAMS::file_rec new_file(temp_f, 0, true, (int)yylval->val);
            if (aprepro.ap_options.debugging)
              std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
                        << " in file " << aprepro.ap_file_list.top().name << " at line "
                        << aprepro.ap_file_list.top().lineno - 1 << "\n";

            outer_file = &aprepro.ap_file_list.top();
            aprepro.ap_file_list.push(new_file);

            tmp_file = new std::fstream(temp_f, std::ios::out);
            loop_lvl++;
            BEGIN(LOOP);
          }
          aprepro.isCollectingLoop = true;
        }
        YY_BREAK
      case 15:
        /* rule 15 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          /* Loop control defined by variable */
          symrec *s;
          char   *pt = strchr(yytext, ')');
          *pt        = '\0';
          if (!check_valid_var(yytext)) {
            aprepro.warning("Invalid variable name syntax '" + std::string(yytext) + "'");
            BEGIN(LOOP_SKIP);
          }
          else {
            s = aprepro.getsym(yytext);

            if (s == nullptr ||
                (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.)) {
              BEGIN(LOOP_SKIP);
            }
            else { /* Value defined and != 0. */
              if (aprepro.ap_options.debugging)
                std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
                          << " in file " << aprepro.ap_file_list.top().name << " at line "
                          << aprepro.ap_file_list.top().lineno - 1 << "\n";

              temp_f = get_temp_filename();
              SEAMS::file_rec new_file(temp_f, 0, true, (int)s->value.var);
              outer_file = &aprepro.ap_file_list.top();
              aprepro.ap_file_list.push(new_file);

              tmp_file = new std::fstream(temp_f, std::ios::out);
              loop_lvl++;
              BEGIN(LOOP);
            }
          }
          aprepro.isCollectingLoop = true;
        }
        YY_BREAK

      case 16:
        /* rule 16 can match eol */
        YY_RULE_SETUP
        {
          outer_file->lineno++;
          if (loop_lvl > 0)
            --loop_lvl;

          if (loop_lvl == 0) {
            BEGIN(INITIAL);
            tmp_file->close();
            delete tmp_file;

            if (!aprepro.doLoopSubstitution)
              yy_push_state(VERBATIM);

            aprepro.isCollectingLoop = false;

            yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
            yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
            curr_index = 0;
          }
          else {
            (*tmp_file) << yytext;
          }
        }
        YY_BREAK
      case 17:
        /* rule 17 can match eol */
        YY_RULE_SETUP
        {
          loop_lvl++; /* Nested Loop */
          (*tmp_file) << yytext;
          outer_file->lineno++;
        }
        YY_BREAK
      case 18:
        /* rule 18 can match eol */
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.interactive || aprepro.string_interactive()) {
            aprepro.warning("Aborting loop(s).", false);

            // Leave the looping state and remove the loop file
            BEGIN(INITIAL);
            tmp_file->close();
            delete tmp_file;

            if (aprepro.ap_file_list.top().tmp_file) {
              remove(aprepro.ap_file_list.top().name.c_str());
              aprepro.ap_file_list.pop();
            }

            loop_lvl                 = 0;
            aprepro.isCollectingLoop = false;
          }
        }
        YY_BREAK
      case 19:
        /* rule 19 can match eol */
        YY_RULE_SETUP
        {
          (*tmp_file) << yytext;
          outer_file->lineno++;
        }
        YY_BREAK

      case 20:
        /* rule 20 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if (loop_lvl > 0)
            --loop_lvl;

          if (loop_lvl == 0) {
            BEGIN(INITIAL);
            aprepro.isCollectingLoop = false;
          }
        }
        YY_BREAK
      case 21:
        /* rule 21 can match eol */
        YY_RULE_SETUP
        {
          loop_lvl++; /* Nested Loop */
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK
      case 22:
        /* rule 22 can match eol */
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.interactive || aprepro.string_interactive()) {
            aprepro.warning("Aborting loops(s).", false);

            // Leave the looping state
            BEGIN(INITIAL);

            loop_lvl                 = 0;
            aprepro.isCollectingLoop = false;
          }
        }
        YY_BREAK
      case 23:
        /* rule 23 can match eol */
        YY_RULE_SETUP
        { /* Do not increment line count */
          ;
        }
        YY_BREAK

      case 24:
        /* rule 24 can match eol */
        YY_RULE_SETUP
        {
          yyless(0);
          curr_index = 0;
          BEGIN(INITIAL);
          switch_skip_to_endcase = false;
        }
        YY_BREAK
      case 25:
        /* rule 25 can match eol */
        YY_RULE_SETUP
        {
          if (!switch_active) {
            yyerror("default statement found outside switch statement.");
          }

          if (!switch_case_run) {
            switch_case_run = true;
            BEGIN(INITIAL);
            switch_skip_to_endcase = false;
            if (aprepro.ap_options.debugging)
              fprintf(stderr, "DEBUG SWITCH: 'default' code executing at line %d\n",
                      aprepro.ap_file_list.top().lineno);
          }
          else {
            if (aprepro.ap_options.debugging)
              fprintf(stderr,
                      "DEBUG SWITCH: 'default' not executing since a previous case already ran at "
                      "line %d\n",
                      aprepro.ap_file_list.top().lineno);

            /* Need to skip all code until end of case */
            BEGIN(END_CASE_SKIP);
          }
        }
        YY_BREAK
      case 26:
        /* rule 26 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          BEGIN(INITIAL);
          switch_active          = false;
          switch_skip_to_endcase = false;
          suppress_nl            = false;
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG SWITCH: 'endswitch' at line %d\n",
                    aprepro.ap_file_list.top().lineno);
        }
        YY_BREAK
      case 27:
        /* rule 27 can match eol */
        YY_RULE_SETUP { aprepro.ap_file_list.top().lineno++; }
        YY_BREAK
      case 28:
        /* rule 28 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if (!switch_active) {
            yyerror("endswitch statement found without matching switch.");
          }
          switch_active          = false;
          switch_skip_to_endcase = false;
        }
        YY_BREAK

      /* This restores the old behavior of ifdef and ifndef
       * where they would eat up any leading whitespace on
       * a line.
       */
      case 29:
        YY_RULE_SETUP
        {
          // Used to avoid undefined variable warnings in old ifdef/ifndef construct
          aprepro.inIfdefGetvar = true;
          unput('(');
          unput('f');
          unput('e');
          unput('d');
          unput('f');
          unput('i');
          unput('_');
          unput('{');
        }
        YY_BREAK
      case 30:
        YY_RULE_SETUP
        {
          // Used to avoid undefined variable warnings in old ifdef/ifndef construct
          aprepro.inIfdefGetvar = true;
          unput('(');
          unput('f');
          unput('e');
          unput('d');
          unput('n');
          unput('f');
          unput('i');
          unput('_');
          unput('{');
        }
        YY_BREAK

      /* If an if was found while skipping, then eat
       * that entire if block until endif
       * found since there is no way that
       * any of the code in that if block could be executed.
       * Make sure to handle multiple levels of skipped ifs...
       *
       * NOTE: if_lvl was not incremented, so don't need to decrement when
       *       endif found.
       */
      case 31:
        /* rule 31 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if (--if_skip_level == 0)
            BEGIN(IF_SKIP);
        }
        YY_BREAK
      case 32:
        /* rule 32 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if_skip_level++;
        }
        YY_BREAK
      case 33:
        /* rule 33 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if_skip_level++;
        }
        YY_BREAK
      case 34:
        /* rule 34 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if_skip_level++;
        }
        YY_BREAK
      case 35:
        /* rule 35 can match eol */
        YY_RULE_SETUP { aprepro.ap_file_list.top().lineno++; }
        YY_BREAK

      /* IF an if, ifdef, or ifndef found while skipping, then
       * skip the entire block up and including the endif.
       * The (IF_WHILE_SKIP) start condition handles this skipping.
       */
      case 36:
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
                    aprepro.ap_file_list.top().lineno);
          if_skip_level = 1;
          BEGIN(IF_WHILE_SKIP);
        }
        YY_BREAK
      case 37:
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
                    aprepro.ap_file_list.top().lineno);
          if_skip_level = 1;
          BEGIN(IF_WHILE_SKIP);
        }
        YY_BREAK
      case 38:
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'ifndef'  found while skipping at line %d\n",
                    aprepro.ap_file_list.top().lineno);
          if_skip_level = 1;
          BEGIN(IF_WHILE_SKIP);
        }
        YY_BREAK

      case 39:
        /* rule 39 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'else'   at level = %d at line %d\n", if_lvl,
                    aprepro.ap_file_list.top().lineno);
          if (YY_START == VERBATIM) {
            if (echo)
              ECHO;
          }
          else if (if_state[if_lvl] == IF_SKIP) {
            if (!if_case_run[if_lvl]) {
              BEGIN(INITIAL);
              if_state[if_lvl]    = INITIAL;
              if_case_run[if_lvl] = true;
            }
            else {
              BEGIN(IF_SKIP);
              if_state[if_lvl] = IF_SKIP;
            }
          }
          else if (if_state[if_lvl] == INITIAL) {
            BEGIN(IF_SKIP);
            if_state[if_lvl] = IF_SKIP;
          }

          /* If neither is true, this is a nested
             if that should be skipped */
        }
        YY_BREAK

      case 40:
        /* rule 40 can match eol */
        YY_RULE_SETUP
        {
          /* If any previous 'block' of this if has executed, then
           * just skip this block; otherwise see if condition is
           * true and execute this block
           */
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'elseif'   at level = %d at line %d\n", if_lvl,
                    aprepro.ap_file_list.top().lineno);

          if (if_case_run[if_lvl]) { /* A previous else/elseif has run */
            aprepro.ap_file_list.top().lineno++;
            /* Already in IF_SKIP, so don't need to change state */
          }
          else {
            /* Need to check the elseif condition; push back and parse */
            yyless(0);
            curr_index = 0;
            BEGIN(INITIAL);
            if_state[if_lvl] = INITIAL;
          }
        }
        YY_BREAK
      case 41:
      case 42:
      case 43:
      case 44:
        YY_RULE_SETUP { ; }
        YY_BREAK
      case 45:
        /* rule 45 can match eol */
        YY_RULE_SETUP { aprepro.ap_file_list.top().lineno++; }
        YY_BREAK

      case 46:
        /* rule 46 can match eol */
        YY_RULE_SETUP
        {

          if (YY_START == VERBATIM) {
            if (echo)
              ECHO;
          }
          else {
            if (if_state[if_lvl] == IF_SKIP || if_state[if_lvl] == INITIAL) {
              BEGIN(INITIAL);
              suppress_nl = false;
            }
            /* If neither is true, this is a nested
               if that should be skipped */
            if (aprepro.ap_options.debugging)
              printf("DEBUG IF: 'endif'  at level = %d at line %d\n", if_lvl,
                     aprepro.ap_file_list.top().lineno);
            if (--if_lvl < 0) {
              if_lvl = 0;
              yyerror("Improperly Nested ifdef/ifndef statements");
            }
            /* Ignore endif if not skipping */
          }
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK
      case 47:
      case 48:
        YY_RULE_SETUP
        {
          sscanf(yytext, "%lf", &yylval->val);
          return (token::NUM);
        }
        YY_BREAK
      case 49:
        YY_RULE_SETUP; // Empty rule
        YY_BREAK
      case 50:
        YY_RULE_SETUP
        {
          symrec *s;
          s = aprepro.getsym(yytext);
          if (s == nullptr)
            s = aprepro.putsym(yytext, SEAMS::Aprepro::SYMBOL_TYPE::UNDEFINED_VARIABLE, false);
          yylval->tptr = s;
          return ((token::yytokentype)s->type);
        }
        YY_BREAK
      case 51:
        YY_RULE_SETUP
        return (token::EQUAL);
        YY_BREAK
      case 52:
        YY_RULE_SETUP
        return (token::EQ_PLUS);
        YY_BREAK
      case 53:
        YY_RULE_SETUP
        return (token::EQ_MINUS);
        YY_BREAK
      case 54:
        YY_RULE_SETUP
        return (token::EQ_TIME);
        YY_BREAK
      case 55:
        YY_RULE_SETUP
        return (token::EQ_DIV);
        YY_BREAK
      case 56:
        YY_RULE_SETUP
        return (token::EQ_POW);
        YY_BREAK
      case 57:
        YY_RULE_SETUP
        return (token::EQ_POW);
        YY_BREAK
      case 58:
        YY_RULE_SETUP
        return (token::INC);
        YY_BREAK
      case 59:
        YY_RULE_SETUP
        return (token::DEC);
        YY_BREAK
      case 60:
        YY_RULE_SETUP
        return (token::PLU);
        YY_BREAK
      case 61:
        YY_RULE_SETUP
        return (token::SUB);
        YY_BREAK
      case 62:
        YY_RULE_SETUP
        return (token::TIM);
        YY_BREAK
      case 63:
        YY_RULE_SETUP
        return (token::TIM); /* ~ is same as multiply */
        YY_BREAK
      case 64:
        YY_RULE_SETUP
        return (token::CONCAT); /* String concatenation */
        YY_BREAK
      case 65:
        YY_RULE_SETUP
        return (token::DIV);
        YY_BREAK
      case 66:
        YY_RULE_SETUP
        return (token::MOD);
        YY_BREAK
      case 67:
        YY_RULE_SETUP
        return (token::POW);
        YY_BREAK
      case 68:
        YY_RULE_SETUP
        return (token::POW);
        YY_BREAK
      case 69:
        /* rule 69 can match eol */
        YY_RULE_SETUP
        aprepro.ap_file_list.top().lineno++;
        YY_BREAK
      case 70:
        YY_RULE_SETUP
        return (token::LPAR);
        YY_BREAK
      case 71:
        YY_RULE_SETUP
        return (token::RPAR);
        YY_BREAK
      case 72:
        YY_RULE_SETUP
        return (token::COMMA);
        YY_BREAK
      case 73:
        YY_RULE_SETUP
        return (token::SEMI);
        YY_BREAK
      case 74:
        YY_RULE_SETUP
        return (token::COLON);
        YY_BREAK
      case 75:
        YY_RULE_SETUP
        return (token::QUEST);
        YY_BREAK
      case 76:
        YY_RULE_SETUP
        return (token::LT);
        YY_BREAK
      case 77:
        YY_RULE_SETUP
        return (token::GT);
        YY_BREAK
      case 78:
        YY_RULE_SETUP
        return (token::LE);
        YY_BREAK
      case 79:
        YY_RULE_SETUP
        return (token::GE);
        YY_BREAK
      case 80:
        YY_RULE_SETUP
        return (token::EQ);
        YY_BREAK
      case 81:
        YY_RULE_SETUP
        return (token::NE);
        YY_BREAK
      case 82:
        YY_RULE_SETUP
        return (token::LAND);
        YY_BREAK
      case 83:
        YY_RULE_SETUP
        return (token::LOR);
        YY_BREAK
      case 84:
        YY_RULE_SETUP
        return (token::NOT);
        YY_BREAK
      case 85:
        YY_RULE_SETUP
        return (token::LBRACK);
        YY_BREAK
      case 86:
        YY_RULE_SETUP
        return (token::RBRACK);
        YY_BREAK
      case 87:
        /* rule 87 can match eol */
        YY_RULE_SETUP
        {
          char *pt = strrchr(yytext, '"');
          *pt      = '\0';
          new_string(yytext + 1, &yylval->string);
          return token::QSTRING;
        }
        YY_BREAK
      case 88:
        /* rule 88 can match eol */
        YY_RULE_SETUP
        {
          char *pt = strrchr(yytext, '\'');
          *pt      = '\0';
          new_string(yytext + 1, &yylval->string);
          return token::QSTRING;
        }
        YY_BREAK
      case 89:
        YY_RULE_SETUP
        {
          // Add to the history string
          save_history_string();

          if (switch_skip_to_endcase)
            BEGIN(END_CASE_SKIP);
          else
            BEGIN(if_state[if_lvl]);
          return (token::RBRACE);
        }
        YY_BREAK
      case 90:
        YY_RULE_SETUP
        {
          if (echo)
            LexerOutput("{", 1);
        }
        YY_BREAK
      case 91:
        YY_RULE_SETUP
        {
          if (echo)
            LexerOutput("}", 1);
        }
        YY_BREAK
      case 92:
        YY_RULE_SETUP
        {
          // Check if we need to save the substitution history first.
          if (aprepro.ap_options.keep_history && (aprepro.ap_file_list.top().name != "_string_")) {
            if (curr_index > (size_t)yyleng)
              hist_start = curr_index - yyleng;
            else
              hist_start = 0;
          }

          BEGIN(PARSING);

          return (token::LBRACE);
        }
        YY_BREAK
      case 93:
      case 94:
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.end_on_exit) {
            if (echo)
              ECHO;
            return ((token::yytokentype)-1);
          }
          else if (echo)
            ECHO;
        }
        YY_BREAK
      case 95:
        YY_RULE_SETUP
        {
          if (echo)
            ECHO;
        }
        YY_BREAK
      case 96:
      case 97:
        YY_RULE_SETUP
        {
          if (echo && if_state[if_lvl] != IF_SKIP)
            ECHO;
        }
        YY_BREAK
      case 98:
        /* rule 98 can match eol */
        YY_RULE_SETUP
        {
          if (echo && !suppress_nl)
            ECHO;
          suppress_nl = false;
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK
      case 99:
        YY_RULE_SETUP
        ECHO;
        YY_BREAK
      case YY_STATE_EOF(INITIAL):
      case YY_STATE_EOF(PARSING):
      case YY_STATE_EOF(GET_FILENAME):
      case YY_STATE_EOF(IF_SKIP):
      case YY_STATE_EOF(GET_VAR):
      case YY_STATE_EOF(VERBATIM):
      case YY_STATE_EOF(IF_WHILE_SKIP):
      case YY_STATE_EOF(GET_LOOP_VAR):
      case YY_STATE_EOF(LOOP):
      case YY_STATE_EOF(LOOP_SKIP):
      case YY_STATE_EOF(END_CASE_SKIP): yyterminate();

      case YY_END_OF_BUFFER: {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
          /* We're scanning a new file or input source.  It's
           * possible that this happened because the user
           * just pointed yyin at a new source and called
           * yylex().  If so, then we have to assure
           * consistency between YY_CURRENT_BUFFER and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new input source.
           */
          (yy_n_chars)                               = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
          YY_CURRENT_BUFFER_LVALUE->yy_input_file    = yyin;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ((yy_c_buf_p) <=
            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]) { /* This was really a NUL. */
          yy_state_type yy_next_state;

          (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state();

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_current_state);

          yy_bp = (yytext_ptr) + YY_MORE_ADJ;

          if (yy_next_state) {
            /* Consume the NUL. */
            yy_cp            = ++(yy_c_buf_p);
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else {
            /* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
            yy_cp = (yy_c_buf_p);
            goto yy_find_action;
          }
        }

        else
          switch (yy_get_next_buffer()) {
          case EOB_ACT_END_OF_FILE: {
            (yy_did_buffer_switch_on_eof) = 0;

            if (yywrap()) {
              /* Note: because we've taken care in
               * yy_get_next_buffer() to have set up
               * yytext, we can now set up
               * yy_c_buf_p so that if some total
               * hoser (like flex itself) wants to
               * call the scanner after we return the
               * YY_NULL, it'll still work - another
               * YY_NULL will get returned.
               */
              (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

              yy_act = YY_STATE_EOF(YY_START);
              goto do_action;
            }

            else {
              if (!(yy_did_buffer_switch_on_eof))
                YY_NEW_FILE;
            }
            break;
          }

          case EOB_ACT_CONTINUE_SCAN:
            (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            yy_cp = (yy_c_buf_p);
            yy_bp = (yytext_ptr) + YY_MORE_ADJ;
            goto yy_match;

          case EOB_ACT_LAST_MATCH:
            (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

            yy_current_state = yy_get_previous_state();

            yy_cp = (yy_c_buf_p);
            yy_bp = (yytext_ptr) + YY_MORE_ADJ;
            goto yy_find_action;
          }
        break;
      }

      default: YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
      } /* end of action switch */
    }   /* end of scanning one token */
  }     /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer(std::istream *arg_yyin, std::ostream *arg_yyout)
{
  yyin          = arg_yyin;
  yyout         = arg_yyout;
  yy_c_buf_p    = 0;
  yy_init       = 0;
  yy_start      = 0;
  yy_flex_debug = 0;
  yylineno      = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag               = 0;
  yy_more_len                = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack                            = NULL;

  yy_buffer_stack     = 0;
  yy_buffer_stack_top = 0;
  yy_buffer_stack_max = 0;

  yy_state_buf = 0;
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
  delete[] yy_state_buf;
  SEAMSfree(yy_start_stack);
  yy_delete_buffer(YY_CURRENT_BUFFER);
  SEAMSfree(yy_buffer_stack);
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream *new_in, std::ostream *new_out)
{
  if (new_in) {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
  }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char *buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char *buf, int max_size)
#endif
{
  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return -1;

  return 1;

#else
  (void)yyin->read(buf, max_size);

  if (yyin->bad())
    return -1;
  else
    return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char *buf, int size) { (void)yyout->write(buf, size); }
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
  register char *dest   = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  register char *source = (yytext_ptr);
  register int   number_to_move, i;
  int            ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer ==
      0) { /* Don't try to fill the buffer, so this is an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else {
    yy_size_t num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

      int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        yy_size_t new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
            /* Include room in for 2 EOB chars. */
            SEAMSrealloc((void *)b->yy_ch_buf, b->yy_buf_size + 2);
      }
      else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if (!b->yy_ch_buf)
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE)
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), (yy_n_chars), num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  if ((yy_n_chars) == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin);
    }

    else {
      ret_val                                    = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yy_size_t)((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
        (char *)SEAMSrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
  }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]     = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
  register yy_state_type yy_current_state;
  register char         *yy_cp;

  /* %% [15.0] code to get the start state into yy_current_state goes here */
  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
    /* %% [16.0] code to find the next state goes here */
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos)  = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 641)
        yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
/* %endif */
{
  register int yy_is_jam;
  /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
  register char *yy_cp = (yy_c_buf_p);

  register YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos)  = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 641)
      yy_c = yy_meta[(unsigned int)yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  yy_is_jam        = (yy_current_state == 640);

  return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyunput(int c, register char *yy_bp)
/* %endif */
{
  register char *yy_cp;

  yy_cp = (yy_c_buf_p);

  /* undo effects of setting up yytext */
  *yy_cp = (yy_hold_char);

  if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2) { /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register yy_size_t number_to_move = (yy_n_chars) + 2;
    register char     *dest =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    register char *source = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      *--dest = *--source;

    yy_cp += (int)(dest - source);
    yy_bp += (int)(dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
      YY_FATAL_ERROR("flex scanner push-back overflow");
  }

  *--yy_cp = (char)c;

  /* %% [18.0] update yylineno here */

  (yytext_ptr)   = yy_bp;
  (yy_hold_char) = *yy_cp;
  (yy_c_buf_p)   = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yyinput()
/* %endif */
{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
      /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else { /* need more input */
      yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
      ++(yy_c_buf_p);

      switch (yy_get_next_buffer()) {
      case EOB_ACT_LAST_MATCH:
        /* This happens because yy_g_n_b()
         * sees that we've accumulated a
         * token and flags that we need to
         * try matching the token before
         * proceeding.  But for input(),
         * there's no matching to consider.
         * So convert the EOB_ACT_LAST_MATCH
         * to EOB_ACT_END_OF_FILE.
         */

        /* Reset buffer status. */
        yyrestart(yyin);

        /*FALLTHROUGH*/

      case EOB_ACT_END_OF_FILE: {
        if (yywrap())
          return EOF;

        if (!(yy_did_buffer_switch_on_eof))
          YY_NEW_FILE;
#ifdef __cplusplus
        return yyinput();
#else
        return input();
#endif
      }

      case EOB_ACT_CONTINUE_SCAN: (yy_c_buf_p) = (yytext_ptr) + offset; break;
      }
    }
  }

  c              = *(unsigned char *)(yy_c_buf_p); /* cast for 8-bit char's */
  *(yy_c_buf_p)  = '\0';                           /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  /* %% [19.0] update BOL and yylineno */

  return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyrestart(std::istream *input_file)
/* %endif */
{

  if (!YY_CURRENT_BUFFER) {
    yyensure_buffer_stack();
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
/* %endif */
{

  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
   */
  yyensure_buffer_stack();
  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p)                        = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin                        = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char)              = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream *file, int size)
/* %endif */
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)SEAMSalloc(sizeof(struct yy_buffer_state));
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *)SEAMSalloc(b->yy_buf_size + 2);
  if (!b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
/* %endif */
{

  if (!b)
    return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer)
    SEAMSfree((void *)b->yy_ch_buf);

  SEAMSfree((void *)b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream *file)
/* %endif */

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file  = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  /* %if-c-only */
  /* %endif */
  /* %if-c++-only */
  b->yy_is_interactive = 0;
  /* %endif */
  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
/* %endif */
{
  if (!b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol        = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state();
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer)
/* %endif */
{
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p)                        = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    (yy_buffer_stack_top)++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state(void)
/* %endif */
{
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if ((yy_buffer_stack_top) > 0)
    --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
  }
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
  yy_size_t num_to_alloc;

  if (!(yy_buffer_stack)) {

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) =
        (struct yy_buffer_state **)SEAMSalloc(num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc      = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state **)SEAMSrealloc(
        (yy_buffer_stack), num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0,
           grow_size * sizeof(struct yy_buffer_state *));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_push_state(int new_state)
/* %endif */
{
  if ((yy_start_stack_ptr) >= (yy_start_stack_depth)) {
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof(int);

    if (!(yy_start_stack))
      (yy_start_stack) = (int *)SEAMSalloc(new_size);

    else
      (yy_start_stack) = (int *)SEAMSrealloc((void *)(yy_start_stack), new_size);

    if (!(yy_start_stack))
      YY_FATAL_ERROR("out of memory expanding start-condition stack");
  }

  (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

  BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_pop_state()
/* %endif */
{
  if (--(yy_start_stack_ptr) < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_top_state()
/* %endif */ { return (yy_start_stack)[(yy_start_stack_ptr)-1]; }

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError(yyconst char msg[])
{
  std::cerr << msg << std::endl;
  exit(YY_EXIT_FAILURE);
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                                                                  \
  do {                                                                                             \
    /* Undo effects of setting up yytext. */                                                       \
    int yyless_macro_arg = (n);                                                                    \
    YY_LESS_LINENO(yyless_macro_arg);                                                              \
    yytext[yyleng] = (yy_hold_char);                                                               \
    (yy_c_buf_p)   = yytext + yyless_macro_arg;                                                    \
    (yy_hold_char) = *(yy_c_buf_p);                                                                \
    *(yy_c_buf_p)  = '\0';                                                                         \
    yyleng         = yyless_macro_arg;                                                             \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
{
  register int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *s)
{
  register int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *SEAMSalloc(yy_size_t size) { return (void *)malloc(size); }

void *SEAMSrealloc(void *ptr, yy_size_t size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *)realloc((char *)ptr, size);
}

void SEAMSfree(void *ptr) { free((char *)ptr); /* see SEAMSrealloc() for (char *) cast */ }

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

namespace SEAMS {

  Scanner::Scanner(Aprepro &aprepro_yyarg, std::istream *in, std::ostream *out)
      : SEAMSFlexLexer(in, out), aprepro(aprepro_yyarg)
  {
    aprepro.outputStream.push(out);
  }

  Scanner::~Scanner()
  {
    while (aprepro.ap_file_list.size() > 1) {
      auto kk = aprepro.ap_file_list.top();
      if (kk.name != "STDIN") {
        yyFlexLexer::yy_load_buffer_state();
        delete yyin;
        yyin = nullptr;
      }
      aprepro.ap_file_list.pop();
      yyFlexLexer::yypop_buffer_state();
    };
  }

  bool Scanner::add_include_file(const std::string &filename, bool must_exist)
  {
    std::fstream *yytmp = nullptr;
    if (must_exist)
      yytmp = aprepro.open_file(filename, "r");
    else
      yytmp = aprepro.check_open_file(filename, "r");

    if (yytmp) {
      if (yyin && !yy_init) {
        yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
      }

      yyin = yytmp;
      aprepro.info("Included File: '" + filename + "'", true);

      SEAMS::file_rec new_file(filename.c_str(), 0, false, 0);
      aprepro.ap_file_list.push(new_file);

      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yytmp, YY_BUF_SIZE));
      curr_index = 0;
    }
    return yytmp != nullptr;
  }

  void Scanner::LexerOutput(const char *buf, int size)
  {
    // Do this before writing so that we have the correct index in the
    // output stream.
    if (aprepro.ap_options.keep_history) {
      aprepro.add_history(history_string, buf);
      history_string.clear();
      hist_start = 0;
    }

    aprepro.outputStream.top()->write(buf, size);
    if (aprepro.ap_options.interactive && aprepro.outputStream.size() == 1) {
      // In interactive mode, output to stdout in addition to the
      // output stream, unless user has redirected output...
      std::cout << buf;
    }
  }

  int Scanner::LexerInput(char *buf, int max_size)
  {
    if (yyin->eof() || yyin->fail()) {
      return 0;
    }

    if (aprepro.ap_options.interactive && yyin == &std::cin && isatty(0) != 0 && isatty(1) != 0) {
      char *line = ap_getline_int(nullptr);

      if (strlen(line) == 0) {
        return 0;
      }

      ap_gl_histadd(line);

      if (strlen(line) > (size_t)max_size - 2) {
        yyerror("input line is too long");
        return 0;
      }

      strcpy(buf, line);
      strcat(buf, "\n");

      return strlen(buf);
    }
    else {
      (void)yyin->read(buf, max_size);

      if (yyin->bad()) {
        return -1;
      }
      else {
        return yyin->gcount();
      }
    }
  }

  int Scanner::yywrap()
  {
    // Clear the history string.
    history_string.clear();
    hist_start = 0;
    curr_index = 0;

    // If we are using the string interactive method, we want to return to
    // our original state if parsing was cutoff prematurely.
    if (aprepro.string_interactive() && YY_START == PARSING) {
      if (switch_skip_to_endcase) {
        BEGIN(END_CASE_SKIP);
      }
      else {
        BEGIN(if_state[if_lvl]);
      }
    }

    if (aprepro.ap_file_list.size() <= 1) { /* End of main file, not in nested include */
      return (1);
    }
    else if (aprepro.string_interactive() && loop_lvl) {
      return (1);
    }
    else if (aprepro.isCollectingLoop) {
      yyerror("End-of-file detected inside loop. Check loop syntax. {endloop} must be on line by "
              "itself.");
      return (1);
    }
    else {
      /* We are in an included or looping file */
      if (aprepro.ap_file_list.top().tmp_file) {
        if (aprepro.ap_options.debugging) {
          std::cerr << "DEBUG LOOP: Loop count = " << aprepro.ap_file_list.top().loop_count << "\n";
        }
        if (--aprepro.ap_file_list.top().loop_count <= 0) {
          // On Windows, you can't remove the temp file until all the references to the
          // file object have been released, so we will delete it here.
          delete yyin;
          yyin = nullptr;

          if (aprepro.ap_file_list.top().name != "_string_") {
            if (!aprepro.ap_options.debugging) {
              remove(aprepro.ap_file_list.top().name.c_str()); /* Delete file if temporary */
            }
            if (!aprepro.doLoopSubstitution) {
              yy_pop_state();
            }
          }

          aprepro.ap_file_list.pop();
          yyFlexLexer::yypop_buffer_state();
        }
        else {
          // Do not pop ap_file_list; we are rereading that file...
          delete yyin;
          yyin = nullptr;
          yyFlexLexer::yypop_buffer_state();
          yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
          yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
          aprepro.ap_file_list.top().lineno = 0;
        }
      }
      else {
        delete yyin;
        yyin = nullptr;
        aprepro.ap_file_list.pop();
        yyFlexLexer::yypop_buffer_state();

        if (aprepro.ap_file_list.top().name == "standard input") {
          yyin = &std::cin;
        }

        /* Turn echoing back on at end of included files. */
        echo = true;

        // If we are not doing aprepro substitutions for the included file, but
        // just collecting lines, pop the state from VERBATIM back to what it
        // was previously.
        if (!aprepro.doIncludeSubstitution) {
          yy_pop_state();
        }

        /* Set immutable mode back to global immutable
         * state at end of included file*/
        aprepro.stateImmutable = aprepro.ap_options.immutable;
      }

      // Reset the current character index.
      curr_index = 0;
      if (yyin != nullptr) {
        curr_index = yyin->tellg();
      }

      return (0);
    }
  }

  /* Print error message to standard error and return.  Note: internally
   *   'lineno' starts at zero.  To avoid confusion, we add 1 to value
   *   when it is output.
   */

  void Scanner::yyerror(const char *s) { aprepro.error(s); }

  char *Scanner::execute(char string[])
  {
    /* Push the contents of 'string' onto the stack to be reread.
     * 'string' will be surrounded by {} so it must be a valid expression.
     */

    /*
     * NOTE: The closing } has not yet been scanned in the call to execute();
     *       therefore, we read it ourselves using input(), then we push:
     *       '}{' + our string + '}'
     */
    int i;
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    // Increment curr_index to account for the '}' and save history
    curr_index++;
    save_history_string();

    /* Allocate space for string + '}' + '{' + end_of_string */
    std::string new_string;
    new_string += "}{";
    new_string += string;
    new_string += "}";

    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));

    auto ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    return (nullptr);
  }

  /* Push the contents of 'string' onto the stack to be reread.
   * 'string' will not be surrounded by {}.
   */

  char *Scanner::rescan(char *string)
  {
    int i;
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input(), then we push our
     *       string and then put the closing } back on the stack last
     *       (to be read first),
     */
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    // Increment curr_index to account for the '}' and save history
    curr_index++;
    save_history_string();

    {
      aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
      std::string new_string("}");
      new_string += string;

      auto ins = new std::istringstream(new_string); // Declare an input string stream.
      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    }
    return (nullptr);
  }

  char *Scanner::import_handler(char *string)
  {
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input().
     */
    int i = 0;
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    add_include_file(string, true);

    if (!aprepro.doIncludeSubstitution) {
      yy_push_state(VERBATIM);
    }

    /*
     * Now we need to push back the closing } so it is the first thing read.
     * We no longer have the initial file stream (is is pushed down on stack)
     * so we need to add a new file stream consisting of just a single character.
     * Wasteful, but best I can come up with at this time.
     */
    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
    std::string new_string("}");
    auto        ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));

    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG IMPORT: '" << string << "'\n";
    }
    return (nullptr);
  }

  char *Scanner::if_handler(double x)
  {
    if_lvl++;
    if (if_lvl >= MAX_IF_NESTING) {
      yyerror("Too many nested if statements");
    }
    else {
      if (x == 0) {
        if_state[if_lvl]    = IF_SKIP;
        if_case_run[if_lvl] = false;
      }
      else {
        suppress_nl         = true;
        if_state[if_lvl]    = INITIAL;
        if_case_run[if_lvl] = true;
      }
      if (aprepro.ap_options.debugging) {
        std::cerr << "DEBUG IF: If level " << if_lvl << " " << if_state[if_lvl] << "\n";
      }
    }
    return (nullptr);
  }

  char *Scanner::elseif_handler(double x)
  {
    if (x == 0 || if_case_run[if_lvl]) {
      if_state[if_lvl] = IF_SKIP;
    }
    else {
      suppress_nl         = 1;
      if_state[if_lvl]    = INITIAL;
      if_case_run[if_lvl] = true;
    }
    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG IF: elseif at level " << if_lvl << " " << if_state[if_lvl] << "\n";
    }
    return (nullptr);
  }

  char *Scanner::switch_handler(double x)
  {
    // save that we are in a switch statement
    // save the value of 'x' for use in deciding which case to execute
    if (switch_active) {
      yyerror("switch statement found while switch already active. Nested switch not supported.");
    }

    switch_active          = true;
    switch_case_run        = false;
    switch_condition       = x;
    switch_skip_to_endcase = true; /* Skip everything until first case */
    suppress_nl            = true;

    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG SWITCH: 'switch' with condition = " << switch_condition << " at line "
                << aprepro.ap_file_list.top().lineno << "\n";
    }
    return (nullptr);
  }

  char *Scanner::case_handler(double x)
  {
    // make sure we are in a switch statement
    // if 'x' matches the value saved in the switch statement
    // and no other case has been executed, then
    // execute the code in the case and set a flag indicating
    // the switch has run;
    // if 'x' does not match the value saved, then skip to endcase
    suppress_nl = true;

    if (!switch_active) {
      yyerror("case statement found outside switch statement.");
    }

    if (!switch_case_run && x == switch_condition) {
      switch_case_run = true;
      if (aprepro.ap_options.debugging) {
        fprintf(stderr,
                "DEBUG SWITCH: 'case' condition = %g matches switch condition = %g at line %d\n", x,
                switch_condition, aprepro.ap_file_list.top().lineno);
      }
    }
    else {
      if (aprepro.ap_options.debugging) {
        fprintf(stderr,
                "DEBUG SWITCH: 'case' condition = %g does not match switch condition = %g "
                "(or case already matched) at line %d\n",
                x, switch_condition, aprepro.ap_file_list.top().lineno);
      }

      // Need to skip all code until end of case
      switch_skip_to_endcase = true;
    }
    return (nullptr);
  }

  void Scanner::save_history_string()
  {
    if (!aprepro.ap_options.keep_history) {
      return;
    }

    // Don't do it if the file is the one used by execute and rescan.
    if (aprepro.ap_file_list.top().name == "_string_" ||
        aprepro.ap_file_list.top().name == "standard input") {
      return;
    }

    size_t hist_end = curr_index;
    size_t len      = hist_end - hist_start;

    if (len <= 0)
      return;

    // Go back in the stream to where we started keeping history.
    yyin->seekg(hist_start);
    if (!yyin->good()) {
      yyerror("Stream state bad in `save_history_string` seekg");
      return;
    }

    // Read everything up to this point again and save it.
    auto tmp = new char[len + 1];
    yyin->read(tmp, len);
    if (!yyin->good()) {
      yyerror("Stream state bad in `save_history_string` read");
      return;
    }
    tmp[len] = '\0';

    history_string = tmp;
    delete[] tmp;
    hist_start = 0;
  }
} // namespace SEAMS

/* This implementation of SEAMSFlexLexer::yylex() is required to fill the
 * vtable of the class SEAMSFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
int SEAMSFlexLexer::yylex()
{
  std::cerr << "in SEAMSFlexLexer::yylex() !" << '\n';
  return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SEAMSFlexLexer::yywrap() { return 1; }
